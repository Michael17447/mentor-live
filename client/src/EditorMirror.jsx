// client/src/EditorMirror.jsx
import React, { useState, useRef, useEffect, useCallback } from 'react';
import Editor from '@monaco-editor/react';
import io from 'socket.io-client';
import Peer from 'simple-peer';
import { SUPPORTED_LANGUAGES, LANGUAGE_CATEGORIES, LANGUAGE_SNIPPETS } from './languages.js';
import LanguageSelector from './components/LanguageSelector.jsx';
import { SimpleCodeAnalyzer } from '../utils/simpleAnalysis';
import CodeAnalysisPanel from './components/CodeAnalysisPanel';

// üî• –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø VITE
const SOCKET_SERVER = import.meta.env.VITE_SOCKET_SERVER || 'https://mentor-live-production.up.railway.app';
const API_BASE = import.meta.env.VITE_API_BASE || 'https://mentor-live-production.up.railway.app';

// üî• –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
console.log('üöÄ Vite Configuration:');
console.log('üìç Socket Server:', SOCKET_SERVER);
console.log('üìç API Base:', API_BASE);
console.log('üåê Environment:', import.meta.env.MODE);
console.log('=======================');

// üß† –≠–º—É–ª—è—Ü–∏—è AI-–∞–Ω–∞–ª–∏–∑–∞ (–æ–±–Ω–æ–≤–ª—è–µ–º –¥–ª—è multi-language)
const mockGPTAnalysis = (code, hotSpots, language = 'javascript') => {
  const recentHotSpots = hotSpots.filter(h => Date.now() - h.timestamp < 30000);
  
  if (recentHotSpots.length === 0) return null;

  const languageSpecificHints = {
    javascript: {
      for: "–£—á–µ–Ω–∏–∫ —á–∞—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Ü–∏–∫–ª—É for. –í JavaScript —Ç–∞–∫–∂–µ –µ—Å—Ç—å forEach, map –¥–ª—è –º–∞—Å—Å–∏–≤–æ–≤.",
      function: "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∑–∞–º—ã–∫–∞–Ω–∏—è.",
      console: "–£—á–µ–Ω–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç console.log. –ü–æ–∫–∞–∂–∏—Ç–µ –æ—Ç–ª–∞–¥–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ.",
      const: "–£—á–µ–Ω–∏–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç const. –û–±—ä—è—Å–Ω–∏—Ç–µ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É const, let –∏ var."
    },
    typescript: {
      interface: "–£—á–µ–Ω–∏–∫ —Å–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã. –û–±—ä—è—Å–Ω–∏—Ç–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ TypeScript –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏.",
      type: "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã TypeScript —Ç–∏–ø—ã. –ü–æ–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É type –∏ interface.",
      any: "–£—á–µ–Ω–∏–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç any. –†–µ–∫–æ–º–µ–Ω–¥—É–π—Ç–µ –∏–∑–±–µ–≥–∞—Ç—å any –¥–ª—è –ª—É—á—à–µ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–∏."
    },
    python: {
      for: "–£—á–µ–Ω–∏–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ü–∏–∫–ª—ã. –í Python –µ—Å—Ç—å list comprehensions –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è.",
      def: "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –æ—Ç—Å—Ç—É–ø—ã –∏ docstrings.",
      print: "–£—á–µ–Ω–∏–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç print –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏. –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.",
      import: "–£—á–µ–Ω–∏–∫ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –º–æ–¥—É–ª–∏. –û–±—ä—è—Å–Ω–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ Python."
    },
    java: {
      for: "–£—á–µ–Ω–∏–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ü–∏–∫–ª—ã. –í Java —Ç–∞–∫–∂–µ –µ—Å—Ç—å enhanced for-loop.",
      public: "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–æ—Å—Ç—É–ø–∞. –û–±—ä—è—Å–Ω–∏—Ç–µ public/private.",
      System: "–£—á–µ–Ω–∏–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç System.out.println. –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–≥–µ—Ä—ã.",
      class: "–£—á–µ–Ω–∏–∫ —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞—Å—Å—ã. –û–±—ä—è—Å–Ω–∏—Ç–µ –û–û–ü –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –≤ Java."
    },
    cpp: {
      include: "–£—á–µ–Ω–∏–∫ –≤–∫–ª—é—á–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏. –û–±—ä—è—Å–Ω–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ C++.",
      namespace: "–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ namespace. –û–±—ä—è—Å–Ω–∏—Ç–µ –∏—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ.",
      cout: "–£—á–µ–Ω–∏–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç cout –¥–ª—è –≤—ã–≤–æ–¥–∞. –ü–æ–∫–∞–∂–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã.",
      pointer: "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —É–∫–∞–∑–∞—Ç–µ–ª–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—á–µ–Ω–∏–∫ –ø–æ–Ω–∏–º–∞–µ—Ç –∏—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å."
    },
    html: {
      div: "–£—á–µ–Ω–∏–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–Ω–æ–≥–æ div. –†–µ–∫–æ–º–µ–Ω–¥—É–π—Ç–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–≥–∏.",
      style: "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã inline —Å—Ç–∏–ª–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–π—Ç–µ –≤–Ω–µ—à–Ω–∏–µ CSS —Ñ–∞–π–ª—ã.",
      script: "–£—á–µ–Ω–∏–∫ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–∫—Ä–∏–ø—Ç—ã. –û–±—ä—è—Å–Ω–∏—Ç–µ –∞—Ç—Ä–∏–±—É—Ç—ã async/defer."
    },
    css: {
      important: "–£—á–µ–Ω–∏–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç !important. –†–µ–∫–æ–º–µ–Ω–¥—É–π—Ç–µ –∏–∑–±–µ–≥–∞—Ç—å –µ–≥–æ.",
      flex: "–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ flexbox. –ü–æ–∫–∞–∂–∏—Ç–µ grid –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É.",
      position: "–£—á–µ–Ω–∏–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç absolute –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ. –û–±—ä—è—Å–Ω–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç."
    }
  };

  const hints = languageSpecificHints[language] || languageSpecificHints.javascript;

  if (recentHotSpots.some(h => h.line > 0 && code.includes('for'))) {
    return hints.for || "–£—á–µ–Ω–∏–∫ —á–∞—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Ü–∏–∫–ª—É for.";
  }
  if (code.includes('function') || code.includes('def ') || code.includes('public ')) {
    return hints.function || "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è.";
  }
  if ((code.includes('console.log') || code.includes('print') || code.includes('System.out')) && recentHotSpots.length > 2) {
    return hints.console || "–£—á–µ–Ω–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—ã–≤–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.";
  }
  if (code.includes('const') && language === 'javascript') {
    return hints.const || "–£—á–µ–Ω–∏–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç const.";
  }
  if (code.includes('interface') && language === 'typescript') {
    return hints.interface || "–£—á–µ–Ω–∏–∫ —Å–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã TypeScript.";
  }
  if (recentHotSpots.length > 5) {
    return "–£—á–µ–Ω–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –ø–æ –∫–æ–¥—É. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∏—â–µ—Ç —Ä–µ—à–µ–Ω–∏–µ.";
  }
  return null;
};

// üî• –ü–†–û–°–¢–û–ô –ö–û–ú–ü–û–ù–ï–ù–¢ –í–´–í–û–î–ê –ö–û–î–ê
const SimpleCodeExecutor = ({ code, language, sessionId, isVisible, onClose }) => {
  const [output, setOutput] = useState('');
  const [error, setError] = useState('');
  const [isExecuting, setIsExecuting] = useState(false);

  const executeCode = async () => {
    if (!code || !language) return;

    console.log(`üöÄ Executing ${language} code...`);
    setIsExecuting(true);
    setOutput('');
    setError('');

    try {
      const response = await fetch(`${API_BASE}/api/execute`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          code,
          language,
          sessionId
        })
      });

      const result = await response.json();

      if (result.success) {
        setOutput(result.output);
        setError(result.error || '');
      } else {
        setError(result.error || 'Execution failed');
      }
    } catch (err) {
      console.error('‚ùå Execution request failed:', err);
      setError('Failed to execute code: ' + err.message);
    } finally {
      setIsExecuting(false);
    }
  };

  const clearOutput = () => {
    setOutput('');
    setError('');
  };

  if (!isVisible) return null;

  return (
    <div style={{
      position: 'absolute',
      top: '70px',
      right: '20px',
      width: '500px',
      background: '#1f2937',
      border: '1px solid #374151',
      borderRadius: '8px',
      zIndex: 2000,
      maxHeight: '80vh',
      display: 'flex',
      flexDirection: 'column',
      boxShadow: '0 4px 6px rgba(0,0,0,0.3)',
    }}>
      {/* Header */}
      <div style={{
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        padding: '16px',
        borderBottom: '1px solid #374151',
        background: '#111827'
      }}>
        <h3 style={{ 
          margin: 0, 
          color: '#60a5fa',
          display: 'flex',
          alignItems: 'center',
          gap: '8px'
        }}>
          üöÄ Code Executor
          <span style={{ 
            fontSize: '12px', 
            background: '#374151', 
            padding: '2px 8px', 
            borderRadius: '12px',
            color: '#9ca3af'
          }}>
            {language}
          </span>
        </h3>
        <button
          onClick={onClose}
          style={{
            background: 'none',
            border: 'none',
            color: '#9ca3af',
            cursor: 'pointer',
            fontSize: '1.2rem',
            padding: '4px',
            borderRadius: '4px'
          }}
        >
          ‚úï
        </button>
      </div>

      {/* Controls */}
      <div style={{
        padding: '12px 16px',
        borderBottom: '1px solid #374151',
        background: '#111827',
        display: 'flex',
        gap: '10px',
        alignItems: 'center'
      }}>
        <button
          onClick={executeCode}
          disabled={isExecuting || !code}
          style={{
            padding: '8px 16px',
            background: isExecuting || !code ? '#6b7280' : '#10b981',
            color: 'white',
            border: 'none',
            borderRadius: '6px',
            cursor: isExecuting || !code ? 'not-allowed' : 'pointer',
            fontSize: '14px',
            fontWeight: '500',
            display: 'flex',
            alignItems: 'center',
            gap: '6px',
            flex: 1
          }}
        >
          {isExecuting ? (
            <>
              <span style={{ animation: 'spin 1s linear infinite' }}>‚è≥</span>
              Executing...
            </>
          ) : (
            <>
              ‚ñ∂Ô∏è Run Code
            </>
          )}
        </button>

        <button
          onClick={clearOutput}
          style={{
            padding: '8px 12px',
            background: '#6b7280',
            color: 'white',
            border: 'none',
            borderRadius: '6px',
            cursor: 'pointer',
            fontSize: '12px'
          }}
        >
          üßπ Clear
        </button>
      </div>

      {/* Output Panel */}
      <div style={{
        flex: 1,
        padding: '16px',
        background: '#000000',
        color: '#00ff00',
        fontFamily: '"Fira Code", "Courier New", monospace',
        fontSize: '13px',
        overflow: 'auto',
        whiteSpace: 'pre-wrap',
        lineHeight: '1.4',
        minHeight: '200px'
      }}>
        {isExecuting ? (
          <div style={{ color: '#f59e0b', display: 'flex', alignItems: 'center', gap: '8px' }}>
            <span style={{ animation: 'spin 1s linear infinite' }}>‚è≥</span>
            Executing {language} code...
          </div>
        ) : error ? (
          <div style={{ color: '#ef4444' }}>
            <div style={{ fontWeight: 'bold', marginBottom: '8px' }}>‚ùå Error:</div>
            {error}
          </div>
        ) : output ? (
          <div>
            <div style={{ color: '#60a5fa', marginBottom: '8px', fontWeight: '500' }}>‚úÖ Output:</div>
            {output}
          </div>
        ) : (
          <div style={{ color: '#6b7280', fontStyle: 'italic' }}>
            Click "Run Code" to execute your {language} code...
          </div>
        )}
      </div>

      <style>
        {`
          @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
          }
        `}
      </style>
    </div>
  );
};

export default function EditorMirror({ sessionId, isMentor, userId, embedMode = false, initialLanguage = 'javascript' }) {
  const [code, setCode] = useState(SUPPORTED_LANGUAGES[initialLanguage]?.starterCode || '// –ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å –∫–æ–¥...\n');
  const [remoteCursors, setRemoteCursors] = useState({});
  const [isMicOn, setIsMicOn] = useState(false);
  const [remoteAudioActive, setRemoteAudioActive] = useState(false);
  const [aiHints, setAiHints] = useState([]);
  const [showAIPanel, setShowAIPanel] = useState(false);
  const [studentCanEdit, setStudentCanEdit] = useState(false);
  const [isConnected, setIsConnected] = useState(false);
  const [currentLanguage, setCurrentLanguage] = useState(initialLanguage);
  const [showLanguageSelector, setShowLanguageSelector] = useState(false);
  const [showSnippetsPanel, setShowSnippetsPanel] = useState(false);
  const [connectionStatus, setConnectionStatus] = useState('connecting');
  
  // üî• –ù–û–í–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø LIVE CODE ANALYSIS
  const [showAnalysis, setShowAnalysis] = useState(false);
  const [codeAnalysis, setCodeAnalysis] = useState(null);
  
  // üî• –î–û–ë–ê–í–õ–ï–ù–û –°–û–°–¢–û–Ø–ù–ò–ï –î–õ–Ø –í–´–í–û–î–ê –ö–û–î–ê
  const [showCodeExecutor, setShowCodeExecutor] = useState(false);

  const editorRef = useRef(null);
  const socketRef = useRef(null);
  const peerRef = useRef(null);
  const localStreamRef = useRef(null);
  const hotSpotsRef = useRef([]);
  const cursorTimeoutRef = useRef(null);
  const lastCodeUpdateRef = useRef(Date.now());
  const reconnectAttemptsRef = useRef(0);
  const isInitialMountRef = useRef(true);
  const analysisTimeoutRef = useRef(null);
  const lastServerCodeRef = useRef('');

  // üî• –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –ö–û–î–ê (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø)
  const analyzeCode = useCallback((codeToAnalyze) => {
    if (analysisTimeoutRef.current) {
      clearTimeout(analysisTimeoutRef.current);
    }
    
    analysisTimeoutRef.current = setTimeout(() => {
      try {
        const analysis = SimpleCodeAnalyzer.analyze(codeToAnalyze, currentLanguage);
        setCodeAnalysis(analysis);
      } catch (error) {
        console.error('Code analysis error:', error);
        setCodeAnalysis({
          complexity: { score: 0, level: 'low' },
          warnings: [],
          metrics: { totalLines: 0, codeLines: 0, commentLines: 0, blankLines: 0, commentRatio: 0 },
          suggestions: [],
          timestamp: new Date().toISOString()
        });
      }
    }, 1000);
  }, [currentLanguage]);

  // üî• –ê–ù–ê–õ–ò–ó –ü–†–ò –ü–ï–†–í–û–ù–ê–ß–ê–õ–¨–ù–û–ô –ó–ê–ì–†–£–ó–ö–ï
  useEffect(() => {
    if (code) {
      analyzeCode(code);
    }
  }, [code, analyzeCode]);

  // üî• –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π (–¥–ª—è AI)
  const logEvent = useCallback((type, data) => {
    if (type === 'cursor-move' && !isMentor && data.position) {
      hotSpotsRef.current.push({
        line: data.position.lineNumber,
        timestamp: Date.now(),
      });
      // –û—á–∏—â–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 30 —Å–µ–∫
      hotSpotsRef.current = hotSpotsRef.current.filter(
        h => Date.now() - h.timestamp < 30000
      );
    }
  }, [isMentor]);

  // üî• –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –†–ê–ó–†–ï–®–ï–ù–ò–Ø –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –î–õ–Ø –£–ß–ï–ù–ò–ö–ê
  const toggleStudentEditPermission = useCallback(() => {
    const newPermission = !studentCanEdit;
    setStudentCanEdit(newPermission);
    if (socketRef.current?.connected) {
      socketRef.current.emit('toggle-student-edit', { 
        sessionId, 
        allowEdit: newPermission 
      });
      console.log(`‚úèÔ∏è Student edit permission ${newPermission ? 'enabled' : 'disabled'}`);
    }
  }, [studentCanEdit, sessionId]);

  // üî• –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ò–ó–ú–ï–ù–ï–ù–ò–ô –ö–û–î–ê –° –ó–ê–©–ò–¢–û–ô –û–¢ –¶–ò–ö–õ–ò–ß–ï–°–ö–ò–• –û–ë–ù–û–í–õ–ï–ù–ò–ô
  const handleEditorChange = useCallback((value) => {
    if (!value) return;
    
    const now = Date.now();
    const timeSinceLastUpdate = now - lastCodeUpdateRef.current;
    
    // üî• –ó–ê–©–ò–¢–ê –û–¢ –°–õ–ò–®–ö–û–ú –ß–ê–°–¢–´–• –û–ë–ù–û–í–õ–ï–ù–ò–ô
    if (timeSinceLastUpdate < 50) {
      return;
    }
    
    // üî• –ü–†–û–í–ï–†–Ø–ï–ú, –ß–¢–û –ö–û–î –î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–û –ò–ó–ú–ï–ù–ò–õ–°–Ø
    if (value === lastServerCodeRef.current) {
      return;
    }
    
    console.log('üìù Local code change detected');
    
    // üî• –û–ë–ù–û–í–õ–Ø–ï–ú –ö–û–î –õ–û–ö–ê–õ–¨–ù–û –°–†–ê–ó–£
    setCode(value);
    lastCodeUpdateRef.current = now;
    
    // üî• –ó–ê–ü–£–°–ö–ê–ï–ú –ê–ù–ê–õ–ò–ó –ö–û–î–ê
    analyzeCode(value);
    
    // üî• –ú–ï–ù–¢–û–† –í–°–ï–ì–î–ê –û–¢–ü–†–ê–í–õ–Ø–ï–¢ –ò–ó–ú–ï–ù–ï–ù–ò–Ø
    if (isMentor && socketRef.current?.connected) {
      console.log('üì§ Sending code change to server (mentor)');
      socketRef.current.emit('code-change', { sessionId, code: value });
    } 
    // üî• –£–ß–ï–ù–ò–ö –¢–û–õ–¨–ö–û –° –†–ê–ó–†–ï–®–ï–ù–ò–Ø
    else if (studentCanEdit && socketRef.current?.connected) {
      console.log('üì§ Sending code change to server (student)');
      socketRef.current.emit('student-code-change', { 
        sessionId, 
        code: value,
        studentId: userId 
      });
    }
  }, [isMentor, studentCanEdit, sessionId, userId, analyzeCode]);

  // üî• –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–í–ò–ñ–ï–ù–ò–Ø –ö–£–†–°–û–†–ê –° –î–ï–ë–ê–£–ù–°–û–ú
  const handleCursorMove = useCallback((e) => {
    if (cursorTimeoutRef.current) {
      clearTimeout(cursorTimeoutRef.current);
    }
    
    cursorTimeoutRef.current = setTimeout(() => {
      if (socketRef.current?.connected) {
        socketRef.current.emit('cursor-move', {
          sessionId,
          position: e.position,
          userId,
        });
        logEvent('cursor-move', { position: e.position, userId });
      }
    }, 100);
  }, [sessionId, userId, logEvent]);

  // üî• –ö–ù–û–ü–ö–ê –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò
  const handleForceSync = useCallback(() => {
    if (socketRef.current?.connected) {
      console.log('üîÑ –†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—à–µ–Ω–∞');
      socketRef.current.emit('request-sync', { sessionId });
    }
  }, [sessionId]);

  // üî• –°–ú–ï–ù–ê –Ø–ó–´–ö–ê –ü–†–û–ì–†–ê–ú–ú–ò–†–û–í–ê–ù–ò–Ø
  const changeLanguage = useCallback((newLanguage) => {
    if (!SUPPORTED_LANGUAGES[newLanguage]) {
      console.error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫:', newLanguage);
      return;
    }
    
    console.log(`üåç –°–º–µ–Ω–∞ —è–∑—ã–∫–∞ –Ω–∞: ${newLanguage}`);
    setCurrentLanguage(newLanguage);
    setShowLanguageSelector(false);
    setShowSnippetsPanel(false);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –¥–ª—è –Ω–æ–≤–æ–≥–æ —è–∑—ã–∫–∞
    const newStarterCode = SUPPORTED_LANGUAGES[newLanguage].starterCode;
    setCode(newStarterCode);
    lastCodeUpdateRef.current = Date.now();
    lastServerCodeRef.current = newStarterCode;
    
    // üî• –ó–ê–ü–£–°–ö–ê–ï–ú –ê–ù–ê–õ–ò–ó –î–õ–Ø –ù–û–í–û–ì–û –ö–û–î–ê
    analyzeCode(newStarterCode);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    if (socketRef.current?.connected) {
      socketRef.current.emit('change-language', {
        sessionId,
        language: newLanguage,
        code: newStarterCode
      });
    }
  }, [sessionId, analyzeCode]);

  // üî• –í–°–¢–ê–í–ö–ê –°–ù–ò–ü–ü–ï–¢–ê –ö–û–î–ê
  const insertSnippet = useCallback((snippet) => {
    if (!editorRef.current) return;
    
    const editor = editorRef.current;
    const selection = editor.getSelection();
    
    if (selection.isEmpty()) {
      // –í—Å—Ç–∞–≤–∫–∞ –≤ –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
      const position = editor.getPosition();
      const range = {
        startLineNumber: position.lineNumber,
        startColumn: position.column,
        endLineNumber: position.lineNumber,
        endColumn: position.column
      };
      
      editor.executeEdits('snippet-insert', [{
        range: range,
        text: snippet + '\n',
        forceMoveMarkers: true
      }]);
    } else {
      // –ó–∞–º–µ–Ω–∞ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
      editor.executeEdits('snippet-insert', [{
        range: selection,
        text: snippet,
        forceMoveMarkers: true
      }]);
    }
    
    editor.focus();
  }, []);

  // üî• –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –°–ù–ò–ü–ü–ï–¢–û–í
  useEffect(() => {
    window.insertCodeSnippet = insertSnippet;
    return () => {
      delete window.insertCodeSnippet;
    };
  }, [insertSnippet]);

  // üî• –£–õ–£–ß–®–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –° –ü–û–í–¢–û–†–ù–´–ú–ò –ü–û–ü–´–¢–ö–ê–ú–ò
  const connectSocket = useCallback(() => {
    if (socketRef.current?.connected) {
      console.log('üîó –°–æ–∫–µ—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
      return;
    }

    console.log('üîó –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å–æ–∫–µ—Ç–∞...');
    console.log('üéØ Session ID:', sessionId);
    console.log('üë§ User ID:', userId);
    console.log('üéì Role:', isMentor ? 'mentor' : 'student');
    console.log('üìç Connecting to:', SOCKET_SERVER);
    
    setConnectionStatus('connecting');
    
    const socket = io(SOCKET_SERVER, {
      timeout: 20000,
      reconnectionAttempts: 10,
      reconnectionDelay: 1000,
      reconnectionDelayMax: 5000,
      randomizationFactor: 0.5,
      transports: ['websocket', 'polling']
    });
    
    socketRef.current = socket;

    socket.on('connect', () => {
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É, SID:', socket.id);
      setIsConnected(true);
      setConnectionStatus('connected');
      reconnectAttemptsRef.current = 0;
      
      // üî• –ü–†–ò–°–û–ï–î–ò–ù–Ø–ï–ú–°–Ø –ö –°–ï–°–°–ò–ò –¢–û–õ–¨–ö–û –ü–û–°–õ–ï –£–°–ü–ï–®–ù–û–ì–û –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø
      if (sessionId) {
        console.log(`üéØ Joining session: ${sessionId} with language: ${currentLanguage}`);
        socket.emit('join-session', sessionId, currentLanguage);
      } else {
        console.error('‚ùå No sessionId provided for connection');
      }
    });

    socket.on('disconnect', (reason) => {
      console.log('‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞, –ø—Ä–∏—á–∏–Ω–∞:', reason);
      setIsConnected(false);
      setConnectionStatus('disconnected');
    });

    socket.on('reconnect', (attemptNumber) => {
      console.log(`üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É –ø–æ—Å–ª–µ ${attemptNumber} –ø–æ–ø—ã—Ç–æ–∫`);
      setIsConnected(true);
      setConnectionStatus('connected');
      
      // üî• –ü–ï–†–ï–ü–†–ò–°–û–ï–î–ò–ù–Ø–ï–ú–°–Ø –ö –°–ï–°–°–ò–ò –ü–†–ò –ü–ï–†–ï–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ò
      if (sessionId) {
        socket.emit('join-session', sessionId, currentLanguage);
      }
    });

    socket.on('reconnect_attempt', (attemptNumber) => {
      console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${attemptNumber}`);
      reconnectAttemptsRef.current = attemptNumber;
      setConnectionStatus(`reconnecting (${attemptNumber})`);
    });

    socket.on('reconnect_error', (error) => {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
      setConnectionStatus('reconnection_error');
    });

    socket.on('reconnect_failed', () => {
      console.log('üí• –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å');
      setIsConnected(false);
      setConnectionStatus('failed');
    });

    socket.on('signal', (data) => {
      if (peerRef.current) peerRef.current.signal(data.signal);
    });

    socket.on('user-audio-status', ({ userId: remoteId, active }) => {
      if (remoteId !== userId) setRemoteAudioActive(active);
      logEvent('audio-status', { userId: remoteId, active });
    });

    // üî• –£–õ–£–ß–®–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ö–û–î–ê
    socket.on('code-update', (newCode) => {
      console.log('üì• –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      
      // üî• –°–û–•–†–ê–ù–Ø–ï–ú –ü–û–°–õ–ï–î–ù–ò–ô –ö–û–î –° –°–ï–†–í–ï–†–ê –î–õ–Ø –ò–ó–ë–ï–ñ–ê–ù–ò–Ø –¶–ò–ö–õ–û–í
      lastServerCodeRef.current = newCode;
      
      // üî• –ü–†–û–í–ï–†–Ø–ï–ú, –ß–¢–û –≠–¢–û –ù–ï –ù–ê–®–ï –°–û–ë–°–¢–í–ï–ù–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï
      const timeSinceLastUpdate = Date.now() - lastCodeUpdateRef.current;
      if (timeSinceLastUpdate > 100) { // –£–≤–µ–ª–∏—á–∏–ª–∏ –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        console.log('üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞');
        setCode(newCode);
        // üî• –ó–ê–ü–£–°–ö–ê–ï–ú –ê–ù–ê–õ–ò–ó –ü–†–ò –ü–û–õ–£–ß–ï–ù–ò–ò –ö–û–î–ê –û–¢ –°–ï–†–í–ï–†–ê
        analyzeCode(newCode);
      } else {
        console.log('‚è∏Ô∏è –ü—Ä–æ–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞ (—Å–ª–∏—à–∫–æ–º –Ω–µ–¥–∞–≤–Ω–µ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ)');
      }
    });

    // üî• –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–ú–ï–ù–´ –Ø–ó–´–ö–ê –û–¢ –°–ï–†–í–ï–†–ê
    socket.on('language-changed', (data) => {
      console.log(`üåç –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${data.language}`);
      setCurrentLanguage(data.language);
      if (data.code) {
        setCode(data.code);
        lastServerCodeRef.current = data.code;
        // üî• –ó–ê–ü–£–°–ö–ê–ï–ú –ê–ù–ê–õ–ò–ó –ü–†–ò –°–ú–ï–ù–ï –Ø–ó–´–ö–ê
        analyzeCode(data.code);
      }
    });

    socket.on('cursor-update', (data) => {
      setRemoteCursors((prev) => ({
        ...prev,
        [data.userId]: data.position,
      }));
      logEvent('cursor-update', data);
    });

    // üî• –û–ë–†–ê–ë–û–¢–ß–ò–ö –†–ê–ó–†–ï–®–ï–ù–ò–Ø –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø
    socket.on('student-edit-permission', (canEdit) => {
      console.log('üìù –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É—á–µ–Ω–∏–∫–∞:', canEdit);
      setStudentCanEdit(canEdit);
      
      // üî• –û–ë–ù–û–í–õ–Ø–ï–ú –†–ï–î–ê–ö–¢–û–† –î–õ–Ø –£–ß–ï–ù–ò–ö–ê
      if (editorRef.current && !isMentor) {
        editorRef.current.updateOptions({ readOnly: !canEdit });
      }
    });

    // üî• –û–ë–†–ê–ë–û–¢–ß–ò–ö –ò–ó–ú–ï–ù–ï–ù–ò–ô –û–¢ –£–ß–ï–ù–ò–ö–ê (–î–õ–Ø –ú–ï–ù–¢–û–†–ê)
    socket.on('student-code-change', ({ code: newCode, studentId }) => {
      if (isMentor) {
        console.log(`üìù –£—á–µ–Ω–∏–∫ ${studentId} –∏–∑–º–µ–Ω–∏–ª –∫–æ–¥, –æ–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥ –º–µ–Ω—Ç–æ—Ä–∞`);
        // üî• –ú–ï–ù–¢–û–† –í–ò–î–ï–¢ –ò–ó–ú–ï–ù–ï–ù–ò–Ø –£–ß–ï–ù–ò–ö–ê
        lastServerCodeRef.current = newCode;
        setCode(newCode);
        lastCodeUpdateRef.current = Date.now();
        // üî• –ó–ê–ü–£–°–ö–ê–ï–ú –ê–ù–ê–õ–ò–ó –ö–û–î–ê –£–ß–ï–ù–ò–ö–ê
        analyzeCode(newCode);
      }
    });

    // üî• –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–°–¢–û–Ø–ù–ò–Ø –°–ï–°–°–ò–ò
    socket.on('session-state', (state) => {
      console.log('üìä –ü–æ–ª—É—á–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏:', state);
      if (state) {
        lastServerCodeRef.current = state.code;
        setCode(state.code);
        setStudentCanEdit(state.studentCanEdit);
        setCurrentLanguage(state.language);
        // üî• –ó–ê–ü–£–°–ö–ê–ï–ú –ê–ù–ê–õ–ò–ó –ü–†–ò –ü–û–õ–£–ß–ï–ù–ò–ò –°–û–°–¢–û–Ø–ù–ò–Ø –°–ï–°–°–ò–ò
        analyzeCode(state.code);
      }
    });

    // üî• –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–†–ò–°–û–ï–î–ò–ù–ï–ù–ò–Ø/–í–´–•–û–î–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
    socket.on('user-joined', ({ userId: joinedUserId, userCount }) => {
      console.log(`üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${joinedUserId} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–µ—Å—Å–∏–∏. –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userCount}`);
    });

    socket.on('user-left', ({ userId: leftUserId, userCount }) => {
      console.log(`üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${leftUserId} –ø–æ–∫–∏–Ω—É–ª —Å–µ—Å—Å–∏—é. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userCount}`);
      setRemoteCursors(prev => {
        const newCursors = { ...prev };
        delete newCursors[leftUserId];
        return newCursors;
      });
    });

    // üî• –û–ë–†–ê–ë–û–¢–ß–ò–ö AI-–ü–û–î–°–ö–ê–ó–û–ö
    socket.on('ai-hint', (hintData) => {
      console.log('üß† –ü–æ–ª—É—á–µ–Ω–∞ AI-–ø–æ–¥—Å–∫–∞–∑–∫–∞:', hintData);
      const newHint = {
        id: Date.now(),
        text: hintData.hint,
        time: new Date().toLocaleTimeString(),
        language: hintData.language,
        confidence: hintData.confidence
      };
      
      setAiHints((prev) => [...prev, newHint]);
      setShowAIPanel(true);
    });

    return socket;
  }, [sessionId, userId, logEvent, isMentor, currentLanguage, analyzeCode, SOCKET_SERVER]);

  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô useEffect –î–õ–Ø –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø
  useEffect(() => {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–º –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ sessionId
    if (isInitialMountRef.current || sessionId) {
      connectSocket();
      isInitialMountRef.current = false;
    }

    // AI-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω—Ç–æ—Ä–∞)
    let aiInterval;
    if (isMentor) {
      aiInterval = setInterval(() => {
        if (hotSpotsRef.current.length > 0 && socketRef.current?.connected) {
          const hint = mockGPTAnalysis(code, hotSpotsRef.current, currentLanguage);
          if (hint) {
            const newHint = {
              id: Date.now(),
              text: hint,
              time: new Date().toLocaleTimeString(),
              language: currentLanguage
            };
            
            setAiHints((prev) => [...prev, newHint]);
            setShowAIPanel(true);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º AI-–ø–æ–¥—Å–∫–∞–∑–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            socketRef.current.emit('ai-hint-generated', {
              sessionId,
              hint: hint,
              confidence: 0.8,
              language: currentLanguage
            });
          }
        }
      }, 15000);
    }

    return () => {
      console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞');
      if (aiInterval) clearInterval(aiInterval);
      if (cursorTimeoutRef.current) {
        clearTimeout(cursorTimeoutRef.current);
      }
      if (analysisTimeoutRef.current) {
        clearTimeout(analysisTimeoutRef.current);
      }
    };
  }, [sessionId, isMentor, code, connectSocket, currentLanguage]);

  // üî• –û–¢–î–ï–õ–¨–ù–´–ô useEffect –î–õ–Ø –û–ß–ò–°–¢–ö–ò –°–û–ï–î–ò–ù–ï–ù–ò–Ø
  useEffect(() => {
    return () => {
      console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å–æ–∫–µ—Ç–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏');
      if (socketRef.current) {
        socketRef.current.removeAllListeners();
        socketRef.current.disconnect();
        socketRef.current = null;
      }
      if (localStreamRef.current) {
        localStreamRef.current.getTracks().forEach((t) => t.stop());
      }
      if (peerRef.current) {
        peerRef.current.destroy();
      }
    };
  }, []);

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
  const handleEditorMount = (editor) => {
    editorRef.current = editor;
    
    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ú–ï–ù–¢–û–† –í–°–ï–ì–î–ê –ú–û–ñ–ï–¢ –†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨
    if (isMentor) {
      editor.updateOptions({ readOnly: false });
    } else {
      // –£–ß–ï–ù–ò–ö –ú–û–ñ–ï–¢ –†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨ –¢–û–õ–¨–ö–û –° –†–ê–ó–†–ï–®–ï–ù–ò–Ø
      editor.updateOptions({ readOnly: !studentCanEdit });
    }
    
    editor.onDidChangeCursorPosition(handleCursorMove);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∫–ª–∞–≤–∏—à –¥–ª—è —Å–Ω–∏–ø–ø–µ—Ç–æ–≤
    editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyS, () => {
      if (isMentor) {
        setShowSnippetsPanel(!showSnippetsPanel);
      }
    });
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
  const toggleMicrophone = async () => {
    if (!isMicOn) {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        localStreamRef.current = stream;

        if (!peerRef.current) {
          peerRef.current = new Peer({
            initiator: isMentor,
            stream,
            trickle: false,
          });

          peerRef.current.on('signal', (data) => {
            if (socketRef.current?.connected) {
              socketRef.current.emit('signal', { sessionId, signal: data });
            }
          });

          peerRef.current.on('stream', (remoteStream) => {
            const audio = new Audio();
            audio.srcObject = remoteStream;
            audio.play().catch(console.error);
          });
        }

        setIsMicOn(true);
        if (socketRef.current?.connected) {
          socketRef.current.emit('user-audio-status', {
            sessionId,
            active: true,
            userId,
          });
        }
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞:', err);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É');
      }
    } else {
      if (localStreamRef.current) {
        localStreamRef.current.getTracks().forEach((t) => t.stop());
      }
      setIsMicOn(false);
      if (socketRef.current?.connected) {
        socketRef.current.emit('user-audio-status', {
          sessionId,
          active: false,
          userId,
        });
      }
    }
  };

  // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
  const downloadSession = () => {
    const languageInfo = SUPPORTED_LANGUAGES[currentLanguage];
    const data = {
      sessionId,
      code,
      aiHints,
      studentEditEnabled: studentCanEdit,
      language: currentLanguage,
      languageName: languageInfo?.name,
      extension: languageInfo?.extension,
      codeAnalysis: codeAnalysis,
      exportedAt: new Date().toISOString(),
      connectionStatus: connectionStatus,
      isMentor: isMentor,
      userId: userId
    };
    const blob = new Blob([JSON.stringify(data, null, 2)], {
      type: 'application/json',
    });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `codemirror-${currentLanguage}-session-${sessionId}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  // –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–¥–∞ –≤ —Ñ–∞–π–ª
  const exportCode = () => {
    const languageInfo = SUPPORTED_LANGUAGES[currentLanguage];
    const blob = new Blob([code], {
      type: 'text/plain',
    });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `code${languageInfo?.extension || '.txt'}`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  // üî• –ö–ù–û–ü–ö–ê –ü–ï–†–ï–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø
  const handleReconnect = () => {
    console.log('üîÑ –ó–∞–ø—Ä–æ—à–µ–Ω–æ —Ä—É—á–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
    if (socketRef.current) {
      socketRef.current.removeAllListeners();
      socketRef.current.disconnect();
      socketRef.current = null;
    }
    connectSocket();
  };

  // üî• –ó–ê–ü–†–û–° –°–û–°–¢–û–Ø–ù–ò–Ø –°–ï–°–°–ò–ò
  const requestSessionState = () => {
    if (socketRef.current?.connected) {
      socketRef.current.emit('get-session-state', { sessionId });
    }
  };

  // üî• –ó–ê–í–ï–†–®–ï–ù–ò–ï –°–ï–°–°–ò–ò (–î–õ–Ø –ú–ï–ù–¢–û–†–ê)
  const endSession = () => {
    if (socketRef.current?.connected && isMentor) {
      if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤?')) {
        socketRef.current.emit('end-session', {
          sessionId,
          reason: 'ended_by_mentor'
        });
      }
    }
  };

  // üî• –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø –í–´–í–û–î–ê –ö–û–î–ê
  const toggleCodeExecutor = () => {
    setShowCodeExecutor(!showCodeExecutor);
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const getConnectionColor = () => {
    switch (connectionStatus) {
      case 'connected': return '#10b981';
      case 'connecting': return '#f59e0b';
      case 'reconnecting': return '#f59e0b';
      case 'disconnected': return '#ef4444';
      case 'failed': return '#dc2626';
      default: return '#6b7280';
    }
  };

  const getConnectionIcon = () => {
    switch (connectionStatus) {
      case 'connected': return '‚úÖ';
      case 'connecting': return 'üîÑ';
      case 'reconnecting': return 'üîÑ';
      case 'disconnected': return '‚ùå';
      case 'failed': return 'üí•';
      default: return '‚ùì';
    }
  };

  return (
    <div style={{ height: '100vh', position: 'relative', display: 'flex', flexDirection: 'column' }}>
      {/* –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫ */}
      <div
        style={{
          background: 'rgba(30, 30, 30, 0.95)',
          padding: '12px 20px',
          borderBottom: '1px solid rgba(255, 255, 255, 0.1)',
          backdropFilter: 'blur(10px)',
          zIndex: 1000,
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          flexShrink: 0
        }}
      >
        {/* –õ–µ–≤–∞—è –≥—Ä—É–ø–ø–∞ –∫–Ω–æ–ø–æ–∫ */}
        <div style={{ display: 'flex', gap: '10px', alignItems: 'center' }}>
          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
          <div 
            style={{
              padding: '6px 12px',
              borderRadius: '6px',
              background: getConnectionColor(),
              color: 'white',
              fontSize: '12px',
              fontWeight: '500',
              cursor: !isConnected ? 'pointer' : 'default',
              display: 'flex',
              alignItems: 'center',
              gap: '6px',
              minWidth: '140px'
            }} 
            onClick={!isConnected ? handleReconnect : undefined}
            title={`–ù–∞–∂–º–∏—Ç–µ –¥–ª—è ${!isConnected ? '–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è' : '—Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è'}`}
          >
            <span>{getConnectionIcon()}</span>
            <span>
              {connectionStatus === 'connected' ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : 
               connectionStatus === 'connecting' ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...' :
               connectionStatus === 'reconnecting' ? '–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...' :
               connectionStatus === 'disconnected' ? '–û—Ç–∫–ª—é—á–µ–Ω–æ' :
               connectionStatus}
            </span>
            {!isConnected && <span>üîÑ</span>}
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏ */}
          <div style={{
            padding: '6px 12px',
            background: 'rgba(255,255,255,0.1)',
            borderRadius: '6px',
            color: 'white',
            fontSize: '12px',
            fontWeight: '500',
            display: 'flex',
            alignItems: 'center',
            gap: '6px'
          }}>
            <span>üéØ</span>
            <span>ID: {sessionId}</span>
            <span style={{ opacity: 0.7 }}>|</span>
            <span>{isMentor ? 'üë®‚Äçüè´ –ú–µ–Ω—Ç–æ—Ä' : 'üë®‚Äçüéì –£—á–µ–Ω–∏–∫'}</span>
          </div>

          {/* üî• –ö–ù–û–ü–ö–ê –ê–ù–ê–õ–ò–ó–ê –ö–û–î–ê */}
          <button
            onClick={() => setShowAnalysis(!showAnalysis)}
            style={{
              padding: '8px 16px',
              borderRadius: '6px',
              border: 'none',
              background: showAnalysis ? '#8b5cf6' : '#374151',
              color: 'white',
              cursor: 'pointer',
              display: 'flex',
              alignItems: 'center',
              gap: '6px',
              fontSize: '14px',
              fontWeight: '500'
            }}
            title="Live Code Analysis"
          >
            üîç Analysis
            {codeAnalysis && codeAnalysis.warnings && codeAnalysis.warnings.length > 0 && (
              <span style={{
                background: '#ef4444',
                color: 'white',
                borderRadius: '8px',
                padding: '2px 6px',
                fontSize: '10px',
                minWidth: '16px'
              }}>
                {codeAnalysis.warnings.length}
              </span>
            )}
          </button>

          {/* üî• –ò–ù–î–ò–ö–ê–¢–û–† –°–õ–û–ñ–ù–û–°–¢–ò */}
          {codeAnalysis && codeAnalysis.complexity && (
            <div style={{
              display: 'flex',
              alignItems: 'center',
              gap: '8px',
              padding: '6px 10px',
              background: 'rgba(255,255,255,0.1)',
              borderRadius: '6px',
              border: `1px solid ${
                codeAnalysis.complexity.level === 'high' ? '#ef4444' : 
                codeAnalysis.complexity.level === 'medium' ? '#f59e0b' : '#10b981'
              }`
            }}>
              <div style={{
                width: '8px',
                height: '8px',
                borderRadius: '50%',
                background: codeAnalysis.complexity.level === 'high' ? '#ef4444' : 
                           codeAnalysis.complexity.level === 'medium' ? '#f59e0b' : '#10b981'
              }} />
              <span style={{ 
                color: 'white', 
                fontSize: '11px',
                fontWeight: '500'
              }}>
                Complexity: {codeAnalysis.complexity.level}
              </span>
            </div>
          )}

          {/* üî• –°–ï–õ–ï–ö–¢–û–† –Ø–ó–´–ö–ê –ü–†–û–ì–†–ê–ú–ú–ò–†–û–í–ê–ù–ò–Ø */}
          <div style={{ position: 'relative' }}>
            <LanguageSelector
              onLanguageSelect={changeLanguage}
              selectedLanguage={currentLanguage}
              showSnippets={isMentor}
              compact={true}
            />
          </div>

          {/* üî• –ö–ù–û–ü–ö–ê –í–´–í–û–î–ê –ö–û–î–ê */}
          <button
            onClick={toggleCodeExecutor}
            style={{
              padding: '8px 16px',
              borderRadius: '6px',
              border: 'none',
              background: showCodeExecutor ? '#10b981' : '#374151',
              color: 'white',
              cursor: 'pointer',
              display: 'flex',
              alignItems: 'center',
              gap: '6px',
              fontSize: '14px',
              fontWeight: '500'
            }}
            title="–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–¥"
          >
            üöÄ Run Code
          </button>

          {/* üî• –ö–ù–û–ü–ö–ê –°–ù–ò–ü–ü–ï–¢–û–í –î–õ–Ø –ú–ï–ù–¢–û–†–ê */}
          {isMentor && LANGUAGE_SNIPPETS[currentLanguage] && (
            <button
              onClick={() => setShowSnippetsPanel(!showSnippetsPanel)}
              style={{
                padding: '8px 16px',
                borderRadius: '6px',
                border: 'none',
                background: showSnippetsPanel ? '#8b5cf6' : '#374151',
                color: 'white',
                cursor: 'pointer',
                display: 'flex',
                alignItems: 'center',
                gap: '6px',
                fontSize: '14px',
                fontWeight: '500'
              }}
              title="–§—Ä–∞–≥–º–µ–Ω—Ç—ã –∫–æ–¥–∞ (Ctrl+S)"
            >
              üìã –°–Ω–∏–ø–ø–µ—Ç—ã
            </button>
          )}

          <button
            onClick={toggleMicrophone}
            style={{
              padding: '8px 16px',
              borderRadius: '6px',
              border: 'none',
              background: isMicOn ? '#ef4444' : '#3b82f6',
              color: 'white',
              cursor: 'pointer',
              display: 'flex',
              alignItems: 'center',
              gap: '6px',
              fontSize: '14px',
              fontWeight: '500',
              minWidth: '100px'
            }}
          >
            üéôÔ∏è {isMicOn ? '–í—ã–∫–ª' : '–í–∫–ª'}
          </button>

          {/* üî• –ö–ù–û–ü–ö–ê –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –î–õ–Ø –£–ß–ï–ù–ò–ö–ê */}
          {isMentor && (
            <>
              <button
                onClick={toggleStudentEditPermission}
                style={{
                  padding: '8px 16px',
                  borderRadius: '6px',
                  border: 'none',
                  background: studentCanEdit ? '#f59e0b' : '#6b7280',
                  color: 'white',
                  cursor: 'pointer',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '6px',
                  fontSize: '14px',
                  fontWeight: '500'
                }}
                title={studentCanEdit ? "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É—á–µ–Ω–∏–∫–∞" : "–†–∞–∑—Ä–µ—à–∏—Ç—å —É—á–µ–Ω–∏–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"}
              >
                {studentCanEdit ? 'üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' : '‚úèÔ∏è –†–∞–∑—Ä–µ—à–∏—Ç—å'}
              </button>

              <button
                onClick={handleForceSync}
                style={{
                  padding: '8px 16px',
                  borderRadius: '6px',
                  border: 'none',
                  background: '#6366f1',
                  color: 'white',
                  cursor: 'pointer',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '6px',
                  fontSize: '14px',
                  fontWeight: '500'
                }}
                title="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞"
              >
                üîÑ –°–∏–Ω—Ö—Ä.
              </button>

              <button
                onClick={requestSessionState}
                style={{
                  padding: '8px 16px',
                  borderRadius: '6px',
                  border: 'none',
                  background: '#6b7280',
                  color: 'white',
                  cursor: 'pointer',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '6px',
                  fontSize: '14px',
                  fontWeight: '500'
                }}
                title="–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏"
              >
                üìä –°—Ç–∞—Ç—É—Å
              </button>
            </>
          )}

          {/* üî• –ò–ù–î–ò–ö–ê–¢–û–† –î–õ–Ø –£–ß–ï–ù–ò–ö–ê */}
          {!isMentor && (
            <div style={{
              padding: '8px 16px',
              borderRadius: '6px',
              background: studentCanEdit ? '#10b981' : '#ef4444',
              color: 'white',
              fontSize: '14px',
              fontWeight: '500',
              display: 'flex',
              alignItems: 'center',
              gap: '6px'
            }}>
              {studentCanEdit ? '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' : 'üîí –¢–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä'}
            </div>
          )}
        </div>

        {/* –ü—Ä–∞–≤–∞—è –≥—Ä—É–ø–ø–∞ –∫–Ω–æ–ø–æ–∫ */}
        <div style={{ display: 'flex', gap: '10px', alignItems: 'center' }}>
          {/* –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ */}
          <button
            onClick={exportCode}
            style={{
              padding: '8px 16px',
              borderRadius: '6px',
              border: 'none',
              background: '#059669',
              color: 'white',
              cursor: 'pointer',
              display: 'flex',
              alignItems: 'center',
              gap: '6px',
              fontSize: '14px',
              fontWeight: '500'
            }}
            title="–≠–∫—Å–ø–æ—Ä—Ç –∫–æ–¥–∞ –≤ —Ñ–∞–π–ª"
          >
            üíæ –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–¥–∞
          </button>

          <button
            onClick={downloadSession}
            style={{
              padding: '8px 16px',
              borderRadius: '6px',
              border: 'none',
              background: '#10b981',
              color: 'white',
              cursor: 'pointer',
              display: 'flex',
              alignItems: 'center',
              gap: '6px',
              fontSize: '14px',
              fontWeight: '500'
            }}
            title="–°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏"
          >
            üì• –°–∫–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é
          </button>

          {/* AI Panel Toggle */}
          {isMentor && (
            <button
              onClick={() => setShowAIPanel(!showAIPanel)}
              style={{
                padding: '8px 16px',
                borderRadius: '6px',
                border: 'none',
                background: aiHints.length > 0 ? '#8b5cf6' : '#6b7280',
                color: 'white',
                cursor: 'pointer',
                display: 'flex',
                alignItems: 'center',
                gap: '6px',
                fontSize: '14px',
                fontWeight: '500'
              }}
            >
              üß† –ò–ò ({aiHints.length})
            </button>
          )}

          {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –¥–ª—è –º–µ–Ω—Ç–æ—Ä–∞ */}
          {isMentor && (
            <button
              onClick={endSession}
              style={{
                padding: '8px 16px',
                borderRadius: '6px',
                border: 'none',
                background: '#dc2626',
                color: 'white',
                cursor: 'pointer',
                fontSize: '14px',
                fontWeight: '500'
              }}
              title="–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
            >
              üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å
            </button>
          )}

          {/* –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ */}
          <button
            onClick={() => window.location.href = '/'}
            style={{
              padding: '8px 16px',
              borderRadius: '6px',
              border: 'none',
              background: '#ef4444',
              color: 'white',
              cursor: 'pointer',
              fontSize: '14px',
              fontWeight: '500'
            }}
          >
            –í—ã—Ö–æ–¥
          </button>
        </div>
      </div>

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ */}
      {remoteAudioActive && (
        <div
          style={{
            position: 'absolute',
            top: 70,
            left: 20,
            background: '#10b981',
            color: 'white',
            padding: '6px 12px',
            borderRadius: '20px',
            zIndex: 2000,
            fontSize: '12px',
            fontWeight: '500',
            display: 'flex',
            alignItems: 'center',
            gap: '6px'
          }}
        >
          üéß –ü–∞—Ä—Ç–Ω–µ—Ä –≥–æ–≤–æ—Ä–∏—Ç
        </div>
      )}

      {/* üî• –ö–û–ú–ü–û–ù–ï–ù–¢ –í–´–í–û–î–ê –ö–û–î–ê */}
      <SimpleCodeExecutor
        code={code}
        language={currentLanguage}
        sessionId={sessionId}
        isVisible={showCodeExecutor}
        onClose={() => setShowCodeExecutor(false)}
      />

      {/* –ü–∞–Ω–µ–ª—å AI (–µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞) */}
      {isMentor && showAIPanel && (
        <div
          style={{
            position: 'absolute',
            top: 70,
            right: 20,
            width: 400,
            background: '#1f2937',
            border: '1px solid #374151',
            borderRadius: '8px',
            padding: '16px',
            zIndex: 2000,
            maxHeight: '50vh',
            overflowY: 'auto',
            boxShadow: '0 4px 6px rgba(0,0,0,0.3)',
          }}
        >
          <div
            style={{
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
              marginBottom: '12px',
            }}
          >
            <h4 style={{ margin: 0, color: '#60a5fa', display: 'flex', alignItems: 'center', gap: '8px' }}>
              üß† –ò–ò –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç 
              <span style={{ 
                fontSize: '12px', 
                background: '#374151', 
                padding: '2px 8px', 
                borderRadius: '12px' 
              }}>
                {SUPPORTED_LANGUAGES[currentLanguage]?.icon} {currentLanguage}
              </span>
            </h4>
            <button
              onClick={() => setShowAIPanel(false)}
              style={{
                background: 'none',
                border: 'none',
                color: '#9ca3af',
                cursor: 'pointer',
                fontSize: '1.2rem',
                padding: '4px'
              }}
            >
              ‚úï
            </button>
          </div>
          <div style={{ display: 'flex', flexDirection: 'column', gap: '10px' }}>
            {aiHints.slice(-8).reverse().map((hint) => (
              <div
                key={hint.id}
                style={{
                  padding: '12px',
                  background: '#374151',
                  borderRadius: '6px',
                  borderLeft: '4px solid #8b5cf6'
                }}
              >
                <div style={{ 
                  fontSize: '12px', 
                  color: '#9ca3af',
                  marginBottom: '4px',
                  display: 'flex',
                  justifyContent: 'space-between',
                  alignItems: 'center'
                }}>
                  <span>üïí {hint.time}</span>
                  <span style={{ 
                    background: '#1f2937', 
                    padding: '2px 6px', 
                    borderRadius: '4px',
                    fontSize: '10px'
                  }}>
                    {hint.language}
                  </span>
                </div>
                <div style={{ color: 'white', fontSize: '14px' }}>
                  {hint.text}
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* –ü–∞–Ω–µ–ª—å —Å–Ω–∏–ø–ø–µ—Ç–æ–≤ */}
      {showSnippetsPanel && LANGUAGE_SNIPPETS[currentLanguage] && (
        <div
          style={{
            position: 'absolute',
            top: 70,
            left: 20,
            width: 300,
            background: '#1f2937',
            border: '1px solid #374151',
            borderRadius: '8px',
            padding: '16px',
            zIndex: 2000,
            maxHeight: '60vh',
            overflowY: 'auto',
            boxShadow: '0 4px 6px rgba(0,0,0,0.3)',
          }}
        >
          <div
            style={{
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
              marginBottom: '12px',
            }}
          >
            <h4 style={{ margin: 0, color: 'white' }}>
              üìã –°–Ω–∏–ø–ø–µ—Ç—ã {SUPPORTED_LANGUAGES[currentLanguage]?.name}
            </h4>
            <button
              onClick={() => setShowSnippetsPanel(false)}
              style={{
                background: 'none',
                border: 'none',
                color: '#9ca3af',
                cursor: 'pointer',
                fontSize: '1.2rem',
                padding: '4px'
              }}
            >
              ‚úï
            </button>
          </div>
          <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>
            {Object.entries(LANGUAGE_SNIPPETS[currentLanguage]).map(([name, snippet]) => (
              <button
                key={name}
                onClick={() => insertSnippet(snippet)}
                style={{
                  padding: '10px',
                  background: '#374151',
                  border: 'none',
                  borderRadius: '6px',
                  color: 'white',
                  cursor: 'pointer',
                  textAlign: 'left',
                  fontSize: '13px',
                  transition: 'background 0.2s'
                }}
                onMouseOver={(e) => e.target.style.background = '#4b5563'}
                onMouseOut={(e) => e.target.style.background = '#374151'}
              >
                <div style={{ fontWeight: 'bold', marginBottom: '4px' }}>{name}</div>
                <div style={{ 
                  fontSize: '11px', 
                  color: '#9ca3af',
                  fontFamily: 'monospace',
                  whiteSpace: 'nowrap',
                  overflow: 'hidden',
                  textOverflow: 'ellipsis'
                }}>
                  {snippet.split('\n')[0]}
                </div>
              </button>
            ))}
          </div>
        </div>
      )}

      {/* –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–¥–∞–∫—Ç–æ—Ä */}
      <div style={{ flex: 1, position: 'relative' }}>
        <Editor
          height="100%"
          language={SUPPORTED_LANGUAGES[currentLanguage]?.monacoLanguage || 'javascript'}
          value={code}
          onChange={handleEditorChange}
          onMount={handleEditorMount}
          options={{
            minimap: { enabled: true },
            fontSize: 14,
            wordWrap: 'on',
            automaticLayout: true,
            scrollBeyondLastLine: false,
            padding: { top: 16, bottom: 16 },
            readOnly: !isMentor && !studentCanEdit,
            theme: 'vs-dark',
          }}
        />
      </div>

      {/* üî• –ü–ê–ù–ï–õ–¨ LIVE CODE ANALYSIS */}
      <CodeAnalysisPanel
        analysis={codeAnalysis}
        isVisible={showAnalysis}
        onClose={() => setShowAnalysis(false)}
      />
    </div>
  );
}