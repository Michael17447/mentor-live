import express from 'express';
import http from 'http';
import cors from 'cors';
import { Server } from 'socket.io';
import { v4 as uuidv4 } from 'uuid';
import { spawn, spawnSync } from 'child_process';
import { tmpdir } from 'os';
import { writeFileSync, unlinkSync } from 'fs';
import { join } from 'path';

const testPythonAccess = () => {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ Python...');
  
  const { execSync } = require('child_process');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à –ø—É—Ç—å –Ω–∞–ø—Ä—è–º—É—é
    const result = execSync('"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python314\\python.exe" --version', { encoding: 'utf8' });
    console.log('‚úÖ Python –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ execSync:', result);
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ execSync:', error.message);
  }
};

testPythonAccess();

console.log('üöÄ Starting CodeMentor server...');
console.log('Node version:', process.version);

const app = express();

// ‚ö†Ô∏è –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
const corsOptions = {
  origin: function (origin, callback) {
    // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ origins –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('üìç CORS request from origin:', origin);
    callback(null, true);
  },
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
};

app.use(cors(corsOptions));
app.use(express.json());

const server = http.createServer(app);
const io = new Server(server, { 
  cors: {
    origin: "*",
    methods: ["GET", "POST"],
    credentials: true
  },
  transports: ['websocket', 'polling']
});

// üî• –ü–†–û–í–ï–†–ö–ê PYTHON –ü–†–ò –ó–ê–ü–£–°–ö–ï –°–ï–†–í–ï–†–ê
const checkPythonOnStartup = () => {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Python...');
  
  const pythonCommands = [
    'C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python314\\python.exe',
    'python',
    'py',
    'python3'
  ];

  let pythonFound = false;

  pythonCommands.forEach(cmd => {
    try {
      const result = spawnSync(cmd, ['--version']);
      if (result.status === 0) {
        const version = result.stdout.toString().trim() || result.stderr.toString().trim();
        console.log(`‚úÖ ${cmd} –¥–æ—Å—Ç—É–ø–µ–Ω: ${version}`);
        pythonFound = true;
      } else {
        console.log(`‚ùå ${cmd} –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥: ${result.status})`);
      }
    } catch (error) {
      console.log(`‚ùå ${cmd} –æ—à–∏–±–∫–∞: ${error.message}`);
    }
  });

  if (pythonFound) {
    console.log('üéâ Python –≥–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∫–æ–¥–∞!');
  } else {
    console.log('‚ö†Ô∏è Python –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Python –∫–æ–¥–∞ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.');
  }
};

// –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
checkPythonOnStartup();

// üî• –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–ú–´–• –Ø–ó–´–ö–û–í (16+ —è–∑—ã–∫–æ–≤)
const SUPPORTED_LANGUAGES = {
  javascript: {
    name: "JavaScript",
    extension: ".js",
    monacoLanguage: "javascript",
    starterCode: "// Welcome to JavaScript\nconsole.log('Hello World!');\n\nfunction example() {\n  return 'This is JavaScript';\n}",
    icon: "üü®",
    category: "web"
  },
  typescript: {
    name: "TypeScript", 
    extension: ".ts",
    monacoLanguage: "typescript",
    starterCode: "// Welcome to TypeScript\nconst message: string = 'Hello World!';\nconsole.log(message);\n\ninterface Example {\n  name: string;\n  value: number;\n}",
    icon: "üî∑",
    category: "web"
  },
  python: {
    name: "Python",
    extension: ".py", 
    monacoLanguage: "python",
    starterCode: "# Welcome to Python\nprint('Hello World!')\n\ndef example_function():\n    return \"This is Python\"",
    icon: "üêç",
    category: "backend"
  },
  java: {
    name: "Java",
    extension: ".java",
    monacoLanguage: "java",
    starterCode: "// Welcome to Java\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World!\");\n    }\n    \n    public static String example() {\n        return \"This is Java\";\n    }\n}",
    icon: "‚òï",
    category: "backend"
  },
  cpp: {
    name: "C++",
    extension: ".cpp",
    monacoLanguage: "cpp", 
    starterCode: "// Welcome to C++\n#include <iostream>\nusing namespace std;\n\nint main() {\n    cout << \"Hello World!\" << endl;\n    return 0;\n}\n\nstring example() {\n    return \"This is C++\";\n}",
    icon: "‚ö°",
    category: "backend"
  },
  csharp: {
    name: "C#",
    extension: ".cs",
    monacoLanguage: "csharp",
    starterCode: "// Welcome to C#\nusing System;\n\nclass Program {\n    static void Main() {\n        Console.WriteLine(\"Hello World!\");\n    }\n    \n    static string Example() {\n        return \"This is C#\";\n    }\n}",
    icon: "üî∂",
    category: "backend"
  },
  php: {
    name: "PHP",
    extension: ".php",
    monacoLanguage: "php",
    starterCode: "<?php\n// Welcome to PHP\necho 'Hello World!';\n\nfunction example() {\n    return \"This is PHP\";\n}\n?>",
    icon: "üêò",
    category: "backend"
  },
  ruby: {
    name: "Ruby", 
    extension: ".rb",
    monacoLanguage: "ruby",
    starterCode: "# Welcome to Ruby\nputs 'Hello World!'\n\ndef example\n  \"This is Ruby\"\nend",
    icon: "üíé",
    category: "backend"
  },
  go: {
    name: "Go",
    extension: ".go",
    monacoLanguage: "go",
    starterCode: "// Welcome to Go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello World!\");\n}\n\nfunc example() string {\n    return \"This is Go\"\n}",
    icon: "üîµ",
    category: "backend"
  },
  rust: {
    name: "Rust",
    extension: ".rs", 
    monacoLanguage: "rust",
    starterCode: "// Welcome to Rust\nfn main() {\n    println!(\"Hello World!\");\n}\n\nfn example() -> &'static str {\n    \"This is Rust\"\n}",
    icon: "ü¶Ä",
    category: "backend"
  },
  swift: {
    name: "Swift",
    extension: ".swift",
    monacoLanguage: "swift", 
    starterCode: "// Welcome to Swift\nimport Foundation\nprint(\"Hello World!\")\n\nfunc example() -> String {\n    return \"This is Swift\"\n}",
    icon: "üê¶",
    category: "mobile"
  },
  kotlin: {
    name: "Kotlin",
    extension: ".kt",
    monacoLanguage: "kotlin",
    starterCode: "// Welcome to Kotlin\nfun main() {\n    println(\"Hello World!\")\n}\n\nfun example(): String {\n    return \"This is Kotlin\"\n}",
    icon: "üî∏",
    category: "mobile"
  },
  html: {
    name: "HTML",
    extension: ".html",
    monacoLanguage: "html",
    starterCode: "<!DOCTYPE html>\n<html>\n<head>\n    <title>Welcome to HTML</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 40px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Hello World!</h1>\n    <p>This is HTML</p>\n</body>\n</html>",
    icon: "üåê",
    category: "web"
  },
  css: {
    name: "CSS",
    extension: ".css", 
    monacoLanguage: "css",
    starterCode: "/* Welcome to CSS */\nbody {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 20px;\n    background-color: #f0f0f0;\n}\n\n.header {\n    color: #333;\n    font-size: 24px;\n}\n\n.container {\n    max-width: 1200px;\n    margin: 0 auto;\n}",
    icon: "üé®",
    category: "web"
  },
  sql: {
    name: "SQL",
    extension: ".sql",
    monacoLanguage: "sql",
    starterCode: "-- Welcome to SQL\n-- Create a simple table\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    email VARCHAR(100)\n);\n\n-- Insert sample data\nINSERT INTO users (id, name, email) VALUES \n(1, 'John Doe', 'john@example.com'),\n(2, 'Jane Smith', 'jane@example.com');\n\n-- Query data\nSELECT * FROM users;",
    icon: "üóÉÔ∏è",
    category: "data"
  },
  json: {
    name: "JSON",
    extension: ".json",
    monacoLanguage: "json",
    starterCode: "{\n  \"welcome\": \"Hello World!\",\n  \"language\": \"JSON\",\n  \"features\": [\n    \"Easy to read\",\n    \"Lightweight\",\n    \"Language independent\"\n  ],\n  \"example\": {\n    \"name\": \"CodeMentor\",\n    \"version\": \"1.0\"\n  }\n}",
    icon: "üìÑ",
    category: "data"
  },
  markdown: {
    name: "Markdown", 
    extension: ".md",
    monacoLanguage: "markdown",
    starterCode: "# Welcome to Markdown\n\nHello World!\n\n## Features\n\n- **Easy** to write\n- **Readable** format\n- Supports *emphasis*\n\n## Code Example\n\n```javascript\nconsole.log('Hello World!');\n```\n\n## Lists\n\n1. First item\n2. Second item\n3. Third item",
    icon: "üìù",
    category: "markup"
  }
};

const LANGUAGE_CATEGORIES = {
  all: "All Languages",
  web: ["javascript", "typescript", "html", "css"],
  backend: ["python", "java", "cpp", "csharp", "php", "ruby", "go", "rust"],
  mobile: ["swift", "kotlin"],
  data: ["sql", "json"],
  markup: ["markdown"]
};

const LANGUAGE_SNIPPETS = {
  javascript: {
    "For Loop": "for (let i = 0; i < array.length; i++) {\n  // Your code here\n}",
    "Function": "function functionName(parameters) {\n  // Your code here\n  return result;\n}",
    "Arrow Function": "const functionName = (parameters) => {\n  // Your code here\n  return result;\n};",
    "Class": "class ClassName {\n  constructor(parameters) {\n    // Initialize\n  }\n  \n  methodName() {\n    // Method logic\n  }\n}"
  },
  python: {
    "For Loop": "for item in collection:\n    # Your code here",
    "Function": "def function_name(parameters):\n    # Your code here\n    return result",
    "Class": "class ClassName:\n    def __init__(self, parameters):\n        # Initialize\n        \n    def method_name(self):\n        # Method logic"
  },
  java: {
    "Main Method": "public static void main(String[] args) {\n    // Your code here\n}",
    "Class": "public class ClassName {\n    // Class variables\n    \n    public ClassName() {\n        // Constructor\n    }\n    \n    public void methodName() {\n        // Method logic\n    }\n}",
    "For Loop": "for (int i = 0; i < array.length; i++) {\n    // Your code here\n}"
  },
  cpp: {
    "Main Function": "#include <iostream>\nusing namespace std;\n\nint main() {\n    // Your code here\n    return 0;\n}",
    "Class": "class ClassName {\n  public:\n    ClassName() {\n      // Constructor\n    }\n    \n    void methodName() {\n      // Method logic\n    }\n};",
    "For Loop": "for (int i = 0; i < count; i++) {\n    // Your code here\n}"
  }
};

// üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –°–ï–°–°–ò–ô
const sessions = {};

// üî• –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ò ID –°–ï–°–°–ò–ò
const normalizeSessionId = (sessionId) => {
  if (!sessionId) return sessionId;
  
  // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "sess_" –µ—Å–ª–∏ –µ—Å—Ç—å –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
  let normalized = sessionId.toUpperCase();
  if (normalized.startsWith('SESS_')) {
    normalized = normalized.substring(5);
  }
  
  console.log(`üîÑ Normalized session ID: ${sessionId} -> ${normalized}`);
  return normalized;
};

// üî• –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –ò–ú–ü–û–†–¢–û–í –ò –ë–ò–ë–õ–ò–û–¢–ï–ö
const analyzeImports = (code, language) => {
  const analysis = {
    imports: [],
    libraries: new Set(),
    features: []
  };

  switch (language) {
    case 'javascript':
    case 'typescript':
      // –ê–Ω–∞–ª–∏–∑ –¥–ª—è JS/TS
      const jsPatterns = [
        /import\s+.*?\s+from\s+['"]([^'"]+)['"]/g,
        /require\s*\(\s*['"]([^'"]+)['"]\s*\)/g,
        /import\s*\(\s*['"]([^'"]+)['"]\s*\)/g
      ];
      
      jsPatterns.forEach(pattern => {
        let match;
        while ((match = pattern.exec(code)) !== null) {
          analysis.imports.push(match[0]);
          const libName = match[1].split('/')[0].replace(/^@/, '');
          analysis.libraries.add(libName);
        }
      });

      // TypeScript —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
      if (language === 'typescript') {
        if (code.includes('interface ')) analysis.features.push('üéØ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã');
        if (code.includes('type ')) analysis.features.push('üéØ –¢–∏–ø—ã');
        if (code.includes('enum ')) analysis.features.push('üéØ –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è');
        if (code.includes('abstract ')) analysis.features.push('üéØ –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã');
        if (code.includes('private ') || code.includes('public ') || code.includes('protected ')) {
          analysis.features.push('üéØ –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–æ—Å—Ç—É–ø–∞');
        }
      }
      break;

    case 'python':
      const pyImports = code.match(/^(import|from)\s+([^\s]+)/gm) || [];
      pyImports.forEach(imp => {
        analysis.imports.push(imp);
        const libName = imp.replace(/^(import|from)\s+/, '').split(/\s|\./)[0];
        analysis.libraries.add(libName);
      });
      break;

    case 'java':
      const javaImports = code.match(/^import\s+([^;]+);/gm) || [];
      javaImports.forEach(imp => {
        analysis.imports.push(imp);
        const libName = imp.replace(/^import\s+/, '').replace(/;/, '').split('.').slice(0, 2).join('.');
        analysis.libraries.add(libName);
      });
      break;

    case 'cpp':
      const cppIncludes = code.match(/^#include\s+[<"]([^>"]+)[>"]/gm) || [];
      cppIncludes.forEach(inc => {
        analysis.imports.push(inc);
        const libName = inc.replace(/^#include\s+[<"]/, '').replace(/[>"]/, '');
        analysis.libraries.add(libName);
      });
      break;
  }

  return analysis;
};

// üî• –ü–û–ü–£–õ–Ø–†–ù–´–ï –ë–ò–ë–õ–ò–û–¢–ï–ö–ò –° –ò–ö–û–ù–ö–ê–ú–ò
const POPULAR_LIBRARIES = {
  'react': '‚öõÔ∏è React',
  'vue': 'üü¢ Vue', 
  'angular': 'üõ°Ô∏è Angular',
  'jquery': '‚ö° jQuery',
  'lodash': 'üì¶ Lodash',
  'underscore': 'üì¶ Underscore',
  'axios': 'üåê Axios',
  'moment': 'üìÖ Moment.js',
  'date-fns': 'üìÖ date-fns',
  'express': 'üöÄ Express',
  'koa': 'üéã Koa',
  'mongoose': 'üçÉ Mongoose',
  'sequelize': 'üóÑÔ∏è Sequelize',
  'redux': 'üìä Redux',
  'mobx': 'üìä MobX',
  'd3': 'üìä D3.js',
  'chart.js': 'üìà Chart.js',
  'three': 'üéÆ Three.js',
  'p5': 'üé® p5.js',
  'jest': 'üÉè Jest',
  'mocha': '‚òï Mocha',
  'chai': '‚úÖ Chai',
  'webpack': 'üì¶ Webpack',
  'babel': 'üîÑ Babel',
  'typescript': 'üî∑ TypeScript',
  // Python –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
  'numpy': 'üî¢ NumPy',
  'pandas': 'üêº Pandas',
  'matplotlib': 'üìä Matplotlib',
  'seaborn': 'üé® Seaborn',
  'scikit': 'ü§ñ Scikit-learn',
  'tensorflow': 'üß† TensorFlow',
  'torch': 'üî• PyTorch',
  'keras': 'üß† Keras',
  'django': 'üé∏ Django',
  'flask': 'üç∂ Flask',
  'fastapi': '‚ö° FastAPI',
  'requests': 'üåê Requests',
  'beautifulsoup': 'üç≤ BeautifulSoup',
  'selenium': 'ü§ñ Selenium',
  'pytest': 'üÉè pytest',
  'unittest': '‚úÖ unittest'
};

// === API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏ ===
app.post('/api/sessions', (req, res) => {
  console.log('üìù Creating new session:', req.body);
  const { course_id, lesson_id, user_id, role = 'student', language = 'javascript', sessionType = 'mentoring' } = req.body;
  
  // üî• –ì–ï–ù–ï–†–ò–†–£–ï–ú ID –í –ö–û–†–†–ï–ö–¢–ù–û–ú –§–û–†–ú–ê–¢–ï (8 —Å–∏–º–≤–æ–ª–æ–≤, uppercase)
  const sessionId = uuidv4().substring(0, 8).toUpperCase();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —è–∑—ã–∫–∞
  if (!SUPPORTED_LANGUAGES[language]) {
    return res.status(400).json({ error: 'Unsupported language' });
  }
  
  const starterCode = SUPPORTED_LANGUAGES[language].starterCode;
  
  res.json({
    session_id: sessionId,
    language: language,
    language_name: SUPPORTED_LANGUAGES[language].name,
    session_type: sessionType,
    join_url: `https://codemirror-client.vercel.app/embed/${sessionId}?role=${role}&language=${language}`,
    embed_iframe: `<iframe src="https://codemirror-client.vercel.app/embed/${sessionId}?role=${role}&language=${language}" width="100%" height="600" allow="microphone"></iframe>`,
    starter_code: starterCode,
    created_at: new Date().toISOString()
  });
});

// üî• API –î–õ–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø –ö–û–î–ê
app.post('/api/execute', async (req, res) => {
  const { code, language, sessionId } = req.body;
  
  console.log(`üöÄ Execution request for ${language} in session ${sessionId}`);
  console.log(`üìù Code length: ${code?.length} chars`);

  try {
    let result;

    switch (language) {
      case 'javascript':
        result = await executeJavaScript(code);
        break;
      case 'python':
        result = await executePython(code);
        break;
      case 'html':
        result = await executeHTML(code);
        break;
      case 'css':
        result = { output: 'CSS executed (applied styles)', error: null };
        break;
      case 'sql':
        result = { output: 'SQL queries would be executed here', error: null };
        break;
      case 'typescript':
        result = await executeTypeScript(code);
        break;
      case 'java':
        result = await executeJava(code);
        break;
      case 'cpp':
        result = await executeCpp(code);
        break;
      case 'php':
        result = await executePHP(code);
        break;
      case 'ruby':
        result = await executeRuby(code);
        break;
      default:
        result = { output: null, error: `Language ${language} execution not yet supported` };
    }

    res.json({
      success: true,
      output: result.output,
      error: result.error,
      timestamp: new Date().toISOString(),
      language: language
    });

  } catch (error) {
    console.error('‚ùå Execution error:', error);
    res.status(500).json({
      success: false,
      output: null,
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// üî• –§–£–ù–ö–¶–ò–ò –î–õ–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø –ö–û–î–ê
const executeJavaScript = (code) => {
  return new Promise((resolve) => {
    try {
      let output = '';
      const originalConsoleLog = console.log;
      
      console.log = (...args) => {
        output += args.map(arg => 
          typeof arg === 'object' ? JSON.stringify(arg, null, 2) : String(arg)
        ).join(' ') + '\n';
      };

      // üî• –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï –ò–ú–ü–û–†–¢–û–í –ò –ë–ò–ë–õ–ò–û–¢–ï–ö
      const analysis = analyzeImports(code, 'javascript');
      const { imports, libraries } = analysis;

      const detectedLibraries = [];
      libraries.forEach(lib => {
        if (POPULAR_LIBRARIES[lib]) {
          detectedLibraries.push(POPULAR_LIBRARIES[lib]);
        } else {
          detectedLibraries.push(`üìö ${lib}`);
        }
      });

      // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥
      const result = eval(`
        (function() {
          try {
            ${code}
            return undefined;
          } catch (e) {
            return e.toString();
          }
        })()
      `);

      console.log = originalConsoleLog;

      let finalOutput = '';
      
      // üî• –î–û–ë–ê–í–õ–Ø–ï–ú –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û –ë–ò–ë–õ–ò–û–¢–ï–ö–ê–• –í –í–´–í–û–î
      if (detectedLibraries.length > 0) {
        finalOutput += 'üìö –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:\n';
        detectedLibraries.forEach(lib => {
          finalOutput += `   ${lib}\n`;
        });
        finalOutput += '\n';
      }

      if (imports.length > 0) {
        finalOutput += 'üì¶ –ò–º–ø–æ—Ä—Ç—ã:\n';
        imports.forEach(imp => {
          finalOutput += `   ${imp}\n`;
        });
        finalOutput += '\n';
      }

      finalOutput += 'üöÄ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n';

      if (result && typeof result === 'string' && result.includes('Error')) {
        resolve({ output: finalOutput + '‚ùå –û—à–∏–±–∫–∞: ' + result, error: result });
      } else {
        const executionOutput = output || '‚úÖ –ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ (–Ω–µ—Ç –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å)';
        resolve({ 
          output: finalOutput + executionOutput, 
          error: null 
        });
      }

    } catch (error) {
      resolve({ output: null, error: error.toString() });
    }
  });
};

// üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø PYTHON –ö–û–î–ê (WINDOWS)
const executePython = async (code) => {
  return new Promise((resolve) => {
    try {
      // üî• –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï –ò–ú–ü–û–†–¢–û–í –í PYTHON
      const analysis = analyzeImports(code, 'python');
      const { imports, libraries } = analysis;

      const detectedLibraries = [];
      libraries.forEach(lib => {
        if (POPULAR_LIBRARIES[lib]) {
          detectedLibraries.push(POPULAR_LIBRARIES[lib]);
        } else {
          detectedLibraries.push(`üìö ${lib}`);
        }
      });

      let analysisOutput = '';

      // üî• –î–û–ë–ê–í–õ–Ø–ï–ú –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û –ë–ò–ë–õ–ò–û–¢–ï–ö–ê–•
      if (detectedLibraries.length > 0) {
        analysisOutput += 'üìö –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:\n';
        detectedLibraries.forEach(lib => {
          analysisOutput += `   ${lib}\n`;
        });
        analysisOutput += '\n';
      }

      if (imports.length > 0) {
        analysisOutput += 'üì¶ –ò–º–ø–æ—Ä—Ç—ã:\n';
        imports.forEach(imp => {
          analysisOutput += `   ${imp}\n`;
        });
        analysisOutput += '\n';
      }

      // üî• –°–û–ó–î–ê–ï–ú –í–†–ï–ú–ï–ù–ù–´–ô –§–ê–ô–õ –î–õ–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø PYTHON –ö–û–î–ê
      const tempDir = tmpdir();
      const tempFile = join(tempDir, `python_exec_${Date.now()}.py`);
      
      // üî• –î–û–ë–ê–í–õ–Ø–ï–ú –û–ë–ï–†–¢–ö–£ –î–õ–Ø –ü–ï–†–ï–•–í–ê–¢–ê –í–´–í–û–î–ê
      const wrappedCode = `
import sys
import io
import traceback

# –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º stdout
old_stdout = sys.stdout
sys.stdout = io.StringIO()

try:
    # –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ${code}
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å –≤—ã–≤–æ–¥
    output = sys.stdout.getvalue()
    print("__SUCCESS__")
    print(output)
    
except Exception as e:
    print("__ERROR__")
    print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}")
    print("\\nüìã Traceback:")
    traceback.print_exc()
    
finally:
    sys.stdout = old_stdout
`;

      writeFileSync(tempFile, wrappedCode);

      // üî• –°–ü–ò–°–û–ö –ö–û–ú–ê–ù–î –î–õ–Ø WINDOWS –° –í–ê–®–ò–ú –ü–£–¢–ï–ú
      const pythonCommands = [
        'C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python314\\python.exe', // üî• –í–ê–® –ü–£–¢–¨
        'python',      // –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
        'py',          // Python Launcher
        'python3',     // –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å–∏—è 3
      ];

      const tryPythonExecution = (commandIndex) => {
        if (commandIndex >= pythonCommands.length) {
          // –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–ø—Ä–æ–±–æ–≤–∞–Ω—ã
          let errorMessage = analysisOutput + 'üöÄ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n\n';
          errorMessage += '‚ùå Python –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ\n\n';
          errorMessage += 'üí° –†–µ—à–µ–Ω–∏—è:\n';
          errorMessage += '   1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Python —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n';
          errorMessage += '   2. –î–æ–±–∞–≤—å—Ç–µ Python –≤ PATH\n';
          errorMessage += '   3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä\n';
          errorMessage += '   4. –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ python.exe –≤ –∫–æ–¥–µ\n\n';
          errorMessage += 'üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: ' + pythonCommands.join(', ');
          
          resolve({ output: errorMessage, error: null });
          return;
        }

        const pythonCommand = pythonCommands[commandIndex];
        console.log(`üîç –ü—Ä–æ–±—É–µ–º Python –∫–æ–º–∞–Ω–¥—É: ${pythonCommand}`);

        const pythonProcess = spawn(pythonCommand, [tempFile]);
        
        let output = '';
        let errorOutput = '';

        pythonProcess.stdout.on('data', (data) => {
          output += data.toString();
          console.log(`üìù Python stdout: ${data.toString()}`);
        });

        pythonProcess.stderr.on('data', (data) => {
          errorOutput += data.toString();
          console.log(`‚ö†Ô∏è Python stderr: ${data.toString()}`);
        });

        pythonProcess.on('close', (code) => {
          console.log(`üîö Python –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º: ${code}`);
          
          // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
          try {
            unlinkSync(tempFile);
          } catch (e) {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª:', e.message);
          }

          let finalOutput = analysisOutput + 'üöÄ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n\n';

          if (errorOutput) {
            finalOutput += `‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è Python:\n${errorOutput}\n`;
          }

          if (output) {
            if (output.includes('__SUCCESS__')) {
              const successOutput = output.split('__SUCCESS__')[1];
              finalOutput += `‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (${pythonCommand}):\n${successOutput}`;
            } else if (output.includes('__ERROR__')) {
              const errorOutput = output.split('__ERROR__')[1];
              finalOutput += `‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (${pythonCommand}):\n${errorOutput}`;
            } else {
              finalOutput += `üìù –í—ã–≤–æ–¥ Python (${pythonCommand}):\n${output}`;
            }
            resolve({ output: finalOutput, error: null });
          } else {
            // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É
            console.log(`üîÑ –ù–µ—Ç –≤—ã–≤–æ–¥–∞, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É...`);
            tryPythonExecution(commandIndex + 1);
          }
        });

        pythonProcess.on('error', (error) => {
          console.log(`‚ùå –û—à–∏–±–∫–∞ —Å ${pythonCommand}:`, error.message);
          // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É
          tryPythonExecution(commandIndex + 1);
        });

        // –¢–∞–π–º–∞—É—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (10 —Å–µ–∫—É–Ω–¥)
        setTimeout(() => {
          console.log(`‚è∞ –¢–∞–π–º–∞—É—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã: ${pythonCommand}`);
          try {
            pythonProcess.kill();
            unlinkSync(tempFile);
          } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
          }
          
          // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ
          tryPythonExecution(commandIndex + 1);
        }, 10000);
      };

      // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      tryPythonExecution(0);

    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤ executePython:', error);
      resolve({ output: null, error: error.toString() });
    }
  });
};

const executeHTML = (code) => {
  // üî• –ê–ù–ê–õ–ò–ó HTML –ù–ê –í–ù–ï–®–ù–ò–ï –†–ï–°–£–†–°–´
  const analysis = {
    imports: [],
    libraries: new Set(),
    features: []
  };

  // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ CSS –∏ JS —Ñ–∞–π–ª–æ–≤
  const cssLinks = code.match(/<link[^>]*href=['"]([^'"]+\.css[^'"]*)['"][^>]*>/g) || [];
  const jsScripts = code.match(/<script[^>]*src=['"]([^'"]+\.js[^'"]*)['"][^>]*>/g) || [];
  
  cssLinks.forEach(link => {
    analysis.imports.push(link);
    const href = link.match(/href=['"]([^'"]+)['"]/)[1];
    if (href.includes('bootstrap')) analysis.libraries.add('Bootstrap');
    if (href.includes('tailwind')) analysis.libraries.add('Tailwind CSS');
    if (href.includes('font-awesome')) analysis.libraries.add('Font Awesome');
  });

  jsScripts.forEach(script => {
    analysis.imports.push(script);
    const src = script.match(/src=['"]([^'"]+)['"]/)[1];
    if (src.includes('jquery')) analysis.libraries.add('jQuery');
    if (src.includes('react')) analysis.libraries.add('React');
    if (src.includes('vue')) analysis.libraries.add('Vue');
  });

  let output = 'üåê HTML –∞–Ω–∞–ª–∏–∑:\n';
  
  if (analysis.libraries.size > 0) {
    output += 'üìö –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:\n';
    analysis.libraries.forEach(lib => {
      output += `   üé® ${lib}\n`;
    });
    output += '\n';
  }

  if (analysis.imports.length > 0) {
    output += 'üì¶ –í–Ω–µ—à–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã:\n';
    analysis.imports.forEach(imp => {
      output += `   ${imp}\n`;
    });
    output += '\n';
  }

  output += 'üöÄ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n';
  output += 'HTML –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω –≤ –ø–∞–Ω–µ–ª–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞\n';
  output += `–†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${code.length} —Å–∏–º–≤–æ–ª–æ–≤`;

  return {
    output: output,
    error: null
  };
};

const executeTypeScript = (code) => {
  // üî• –ê–ù–ê–õ–ò–ó TYPESCRIPT
  const analysis = analyzeImports(code, 'typescript');
  const { imports, libraries, features } = analysis;

  const detectedLibraries = [];
  libraries.forEach(lib => {
    if (POPULAR_LIBRARIES[lib]) {
      detectedLibraries.push(POPULAR_LIBRARIES[lib]);
    } else {
      detectedLibraries.push(`üìö ${lib}`);
    }
  });

  let output = 'üî∑ TypeScript –∞–Ω–∞–ª–∏–∑:\n';
  
  if (detectedLibraries.length > 0) {
    output += 'üìö –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:\n';
    detectedLibraries.forEach(lib => {
      output += `   ${lib}\n`;
    });
    output += '\n';
  }

  if (imports.length > 0) {
    output += 'üì¶ –ò–º–ø–æ—Ä—Ç—ã:\n';
    imports.forEach(imp => {
      output += `   ${imp}\n`;
    });
    output += '\n';
  }

  if (features.length > 0) {
    output += 'üî∑ –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ TypeScript:\n';
    features.forEach(feature => {
      output += `   ${feature}\n`;
    });
    output += '\n';
  }

  output += 'üöÄ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n';
  output += 'TypeScript –∫–æ–¥ –±—É–¥–µ—Ç —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω –≤ JavaScript –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω';

  return {
    output: output,
    error: null
  };
};

const executeJava = (code) => {
  // üî• –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï –ò–ú–ü–û–†–¢–û–í –í JAVA
  const analysis = analyzeImports(code, 'java');
  const { imports } = analysis;

  let output = '‚òï Java –∞–Ω–∞–ª–∏–∑:\n';
  
  if (imports.length > 0) {
    output += 'üì¶ –ò–º–ø–æ—Ä—Ç—ã –ø–∞–∫–µ—Ç–æ–≤:\n';
    imports.forEach(imp => {
      output += `   üì¶ ${imp}\n`;
    });
    output += '\n';
  } else {
    output += 'üìù –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Java\n\n';
  }

  output += 'üöÄ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n';
  output += 'Java –∫–æ–¥ –±—É–¥–µ—Ç —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω –≤ JVM';

  return {
    output: output,
    error: null
  };
};

const executeCpp = (code) => {
  // üî• –ê–ù–ê–õ–ò–ó C++ INCLUDES
  const analysis = analyzeImports(code, 'cpp');
  const { imports } = analysis;

  let output = '‚ö° C++ –∞–Ω–∞–ª–∏–∑:\n';
  
  if (imports.length > 0) {
    output += 'üì¶ –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏:\n';
    imports.forEach(imp => {
      output += `   ${imp}\n`;
    });
    output += '\n';
  } else {
    output += 'üìù –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ C++\n\n';
  }

  output += 'üöÄ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n';
  output += 'C++ –∫–æ–¥ –±—É–¥–µ—Ç —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω';

  return {
    output: output,
    error: null
  };
};

const executePHP = (code) => {
  // üî• –ê–ù–ê–õ–ò–ó PHP INCLUDES –ò REQUIRE
  const includes = code.match(/(include|require)(_once)?\s*['"]([^'"]+)['"]/g) || [];
  const imports = [];
  const libraries = new Set();

  includes.forEach(inc => {
    imports.push(inc);
    const file = inc.match(/['"]([^'"]+)['"]/)[1];
    if (file.includes('vendor/')) libraries.add('Composer Package');
  });

  let output = 'üêò PHP –∞–Ω–∞–ª–∏–∑:\n';
  
  if (libraries.size > 0) {
    output += 'üìö –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:\n';
    libraries.forEach(lib => {
      output += `   ${lib}\n`;
    });
    output += '\n';
  }

  if (imports.length > 0) {
    output += 'üì¶ –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:\n';
    imports.forEach(imp => {
      output += `   ${imp}\n`;
    });
    output += '\n';
  }

  output += 'üöÄ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n';

  // –≠–º—É–ª—è—Ü–∏—è PHP echo statements
  const echoMatches = code.match(/echo\s+['"]([^'"]+)['"];/g) || [];
  let executionOutput = '';
  
  echoMatches.forEach(echoStmt => {
    const content = echoStmt.replace(/echo\s+['"]([^'"]+)['"];/, '$1');
    executionOutput += content + '\n';
  });

  output += executionOutput || '‚úÖ –ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ';

  return {
    output: output,
    error: null
  };
};

const executeRuby = (code) => {
  // üî• –ê–ù–ê–õ–ò–ó RUBY REQUIRE
  const requires = code.match(/require\s+['"]([^'"]+)['"]/g) || [];
  const imports = [];
  const libraries = new Set();

  requires.forEach(req => {
    imports.push(req);
    const lib = req.match(/['"]([^'"]+)['"]/)[1];
    libraries.add(lib);
  });

  let output = 'üíé Ruby –∞–Ω–∞–ª–∏–∑:\n';
  
  if (libraries.size > 0) {
    output += 'üìö –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –≥–µ–º—ã:\n';
    libraries.forEach(lib => {
      output += `   üíé ${lib}\n`;
    });
    output += '\n';
  }

  if (imports.length > 0) {
    output += 'üì¶ –ò–º–ø–æ—Ä—Ç—ã:\n';
    imports.forEach(imp => {
      output += `   ${imp}\n`;
    });
    output += '\n';
  }

  output += 'üöÄ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n';

  // –≠–º—É–ª—è—Ü–∏—è Ruby puts statements
  const putsMatches = code.match(/puts\s+['"]([^'"]+)['"]/g) || [];
  let executionOutput = '';
  
  putsMatches.forEach(putsStmt => {
    const content = putsStmt.replace(/puts\s+['"]([^'"]+)['"]/, '$1');
    executionOutput += content + '\n';
  });

  output += executionOutput || '‚úÖ –ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ';

  return {
    output: output,
    error: null
  };
};

// Health check endpoints
app.get('/', (req, res) => {
  console.log('üè† GET / request received');
  res.json({ 
    status: 'OK', 
    message: 'CodeMentor Server is running',
    timestamp: new Date().toISOString(),
    socketConnections: Object.keys(sessions).length,
    supportedLanguages: Object.keys(SUPPORTED_LANGUAGES).length,
    languageCategories: LANGUAGE_CATEGORIES,
    features: {
      codeExecution: true,
      realTimeCollaboration: true,
      voiceChat: true,
      aiAssistance: true,
      supportedLanguages: Object.keys(SUPPORTED_LANGUAGES).length,
      importAnalysis: true
    }
  });
});

app.get('/api/health', (req, res) => {
  console.log('‚ù§Ô∏è GET /api/health request received');
  res.json({ 
    status: 'healthy',
    timestamp: new Date().toISOString(),
    sessions: Object.keys(sessions).length,
    supportedLanguages: Object.keys(SUPPORTED_LANGUAGES).length,
    uptime: process.uptime(),
    memory: process.memoryUsage(),
    features: {
      codeExecution: true,
      supportedExecutionLanguages: ['javascript', 'python', 'html', 'css', 'typescript', 'java', 'cpp', 'php', 'ruby'],
      importAnalysis: true
    }
  });
});

// üî• API –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –Ø–ó–´–ö–ê–•
app.get('/api/languages', (req, res) => {
  const { category, include_snippets } = req.query;
  
  if (category && LANGUAGE_CATEGORIES[category]) {
    const languages = {};
    LANGUAGE_CATEGORIES[category].forEach(langKey => {
      languages[langKey] = {
        ...SUPPORTED_LANGUAGES[langKey],
        canExecute: ['javascript', 'python', 'html', 'css', 'typescript', 'java', 'cpp', 'php', 'ruby'].includes(langKey)
      };
    });
    res.json(languages);
  } else {
    const languagesWithExecution = {};
    Object.keys(SUPPORTED_LANGUAGES).forEach(langKey => {
      languagesWithExecution[langKey] = {
        ...SUPPORTED_LANGUAGES[langKey],
        canExecute: ['javascript', 'python', 'html', 'css', 'typescript', 'java', 'cpp', 'php', 'ruby'].includes(langKey)
      };
    });
    res.json(languagesWithExecution);
  }
});

app.get('/api/languages/categories', (req, res) => {
  res.json(LANGUAGE_CATEGORIES);
});

app.get('/api/languages/:language', (req, res) => {
  const language = req.params.language;
  if (!SUPPORTED_LANGUAGES[language]) {
    return res.status(404).json({ error: 'Language not supported' });
  }
  
  res.json({
    ...SUPPORTED_LANGUAGES[language],
    canExecute: ['javascript', 'python', 'html', 'css', 'typescript', 'java', 'cpp', 'php', 'ruby'].includes(language)
  });
});

app.get('/api/languages/:language/snippets', (req, res) => {
  const language = req.params.language;
  const snippets = LANGUAGE_SNIPPETS[language] || {};
  res.json(snippets);
});

// üî• API –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ò –ê–ù–ê–õ–ò–¢–ò–ö–ò
app.get('/api/stats', (req, res) => {
  const stats = {
    totalSessions: Object.keys(sessions).length,
    totalUsers: Object.values(sessions).reduce((acc, session) => acc + session.users.length, 0),
    languagesInUse: [...new Set(Object.values(sessions).map(s => s.language))],
    sessionsByLanguage: {},
    activeSessions: Object.values(sessions).filter(s => s.lastActivity > Date.now() - 300000).length,
    features: {
      codeExecution: true,
      realTimeCollaboration: true,
      supportedLanguages: Object.keys(SUPPORTED_LANGUAGES).length,
      importAnalysis: true
    },
    server: {
      uptime: process.uptime(),
      memory: process.memoryUsage(),
      nodeVersion: process.version
    }
  };

  // –ü–æ–¥—Å—á–µ—Ç —Å–µ—Å—Å–∏–π –ø–æ —è–∑—ã–∫–∞–º
  Object.values(sessions).forEach(session => {
    stats.sessionsByLanguage[session.language] = (stats.sessionsByLanguage[session.language] || 0) + 1;
  });

  res.json(stats);
});

// üî• –î–û–ë–ê–í–ò–¢–¨ –ù–û–í–´–ï API –î–õ–Ø –ò–°–¢–û–†–ò–ò (–µ—Å–ª–∏ –µ—Å—Ç—å –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)
app.get('/api/sessions/:sessionId/info', (req, res) => {
  const normalizedSessionId = normalizeSessionId(req.params.sessionId);
  const session = sessions[normalizedSessionId];
  if (!session) {
    return res.status(404).json({ error: 'Session not found' });
  }
  
  res.json({
    sessionId: normalizedSessionId,
    userCount: session.users.length,
    studentCanEdit: session.studentCanEdit,
    language: session.language,
    languageInfo: SUPPORTED_LANGUAGES[session.language],
    codeLength: session.code?.length,
    lastActivity: new Date(session.lastActivity).toISOString(),
    sessionDuration: Date.now() - session.lastActivity
  });
});

// üî• –î–û–ë–ê–í–ò–¢–¨ API –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò
app.get('/api/debug/sessions', (req, res) => {
  const sessionInfo = Object.entries(sessions).map(([sessionId, sessionData]) => ({
    sessionId,
    userCount: sessionData.users.length,
    studentCanEdit: sessionData.studentCanEdit,
    language: sessionData.language,
    languageName: SUPPORTED_LANGUAGES[sessionData.language]?.name,
    codeLength: sessionData.code?.length,
    users: sessionData.users,
    lastActivity: new Date(sessionData.lastActivity).toISOString()
  }));
  
  res.json({
    totalSessions: Object.keys(sessions).length,
    supportedLanguages: Object.keys(SUPPORTED_LANGUAGES),
    languageCategories: LANGUAGE_CATEGORIES,
    sessions: sessionInfo
  });
});

app.get('/api/debug/session/:sessionId', (req, res) => {
  const normalizedSessionId = normalizeSessionId(req.params.sessionId);
  const session = sessions[normalizedSessionId];
  if (!session) {
    return res.status(404).json({ error: 'Session not found' });
  }
  
  res.json({
    sessionId: normalizedSessionId,
    ...session,
    codePreview: session.code ? session.code.substring(0, 200) + '...' : 'empty',
    languageInfo: SUPPORTED_LANGUAGES[session.language]
  });
});

// üî• API –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ï–°–°–ò–Ø–ú–ò
app.delete('/api/sessions/:sessionId', (req, res) => {
  const normalizedSessionId = normalizeSessionId(req.params.sessionId);
  if (sessions[normalizedSessionId]) {
    delete sessions[normalizedSessionId];
    console.log(`üóëÔ∏è Session ${normalizedSessionId} deleted via API`);
    res.json({ message: 'Session deleted successfully' });
  } else {
    res.status(404).json({ error: 'Session not found' });
  }
});

// === WebSocket –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ ===
io.on('connection', (socket) => {
  console.log('üîå –ü–æ–¥–∫–ª—é—á–∏–ª—Å—è:', socket.id);
  console.log('üìç Headers origin:', socket.handshake.headers.origin);
  console.log('üìç User agent:', socket.handshake.headers['user-agent']);

  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö join-session –° –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ï–ô ID
  socket.on('join-session', async (sessionId, language = 'javascript') => {
    // üî• –ù–û–†–ú–ê–õ–ò–ó–£–ï–ú ID –°–ï–°–°–ò–ò
    const normalizedSessionId = normalizeSessionId(sessionId);
    console.log(`üì• ${socket.id} joined session: ${sessionId} -> normalized: ${normalizedSessionId} with language: ${language}`);
    socket.sessionId = normalizedSessionId;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —è–∑—ã–∫
    const normalizedLanguage = SUPPORTED_LANGUAGES[language] ? language : 'javascript';
    const starterCode = SUPPORTED_LANGUAGES[normalizedLanguage]?.starterCode || '// Start coding...\n';
    
    // üî• –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ï–°–°–ò–ò –° –ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù–ù–´–ú ID
    if (!sessions[normalizedSessionId]) {
      sessions[normalizedSessionId] = {
        users: [],
        code: starterCode,
        studentCanEdit: false,
        language: normalizedLanguage,
        lastActivity: Date.now(),
        createdAt: Date.now(),
        mentorId: socket.id
      };
      
      console.log(`üÜï Created ${normalizedLanguage} session: ${normalizedSessionId}`);
    }
    
    sessions[normalizedSessionId].users.push(socket.id);
    sessions[normalizedSessionId].lastActivity = Date.now();
    socket.join(normalizedSessionId);
    
    // üî• –û–¢–ü–†–ê–í–ò–¢–¨ –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –ù–û–í–û–ú–£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ
    socket.emit('code-update', sessions[normalizedSessionId].code);
    socket.emit('student-edit-permission', sessions[normalizedSessionId].studentCanEdit);
    socket.emit('language-changed', { 
      language: sessions[normalizedSessionId].language,
      languageInfo: SUPPORTED_LANGUAGES[sessions[normalizedSessionId].language]
    });
    
    // üî• –£–í–ï–î–û–ú–ò–¢–¨ –î–†–£–ì–ò–• –£–ß–ê–°–¢–ù–ò–ö–û–í –û –ü–†–ò–°–û–ï–î–ò–ù–ï–ù–ò–ò
    socket.to(normalizedSessionId).emit('user-joined', { 
      userId: socket.id,
      userCount: sessions[normalizedSessionId].users.length
    });
    
    console.log(`üë• Users in ${sessions[normalizedSessionId].language} session ${normalizedSessionId}:`, sessions[normalizedSessionId].users.length);
  });

  // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  socket.on('toggle-student-edit', (data) => {
    const normalizedSessionId = normalizeSessionId(data.sessionId);
    console.log(`‚úèÔ∏è Student edit permission: ${data.allowEdit} in ${data.sessionId} -> normalized: ${normalizedSessionId}`);
    
    // üî• –°–û–•–†–ê–ù–ò–¢–¨ –°–û–°–¢–û–Ø–ù–ò–ï –í –°–ï–°–°–ò–ò
    if (sessions[normalizedSessionId]) {
      sessions[normalizedSessionId].studentCanEdit = data.allowEdit;
      sessions[normalizedSessionId].lastActivity = Date.now();
    }
    
    // üî• –û–¢–ü–†–ê–í–ò–¢–¨ –í–°–ï–ú –£–ß–ê–°–¢–ù–ò–ö–ê–ú –°–ï–°–°–ò–ò
    io.to(normalizedSessionId).emit('student-edit-permission', data.allowEdit);
  });

  // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–¥–∞ –æ—Ç —É—á–µ–Ω–∏–∫–∞
  socket.on('student-code-change', (data) => {
    const normalizedSessionId = normalizeSessionId(data.sessionId);
    console.log(`üìù Student ${data.studentId} changed code in ${data.sessionId} -> normalized: ${normalizedSessionId}`);
    console.log(`üìÑ Code length: ${data.code?.length} chars, Language: ${sessions[normalizedSessionId]?.language}`);
    
    // üî• –û–ë–ù–û–í–ò–¢–¨ –ö–û–î –í –°–ï–°–°–ò–ò
    if (sessions[normalizedSessionId]) {
      sessions[normalizedSessionId].code = data.code;
      sessions[normalizedSessionId].lastActivity = Date.now();
    }
    
    // üî• –ü–ï–†–ï–°–õ–ê–¢–¨ –í–°–ï–ú –£–ß–ê–°–¢–ù–ò–ö–ê–ú –°–ï–°–°–ò–ò (–í–ö–õ–Æ–ß–ê–Ø –ú–ï–ù–¢–û–†–ê)
    socket.to(normalizedSessionId).emit('code-update', data.code);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    const preview = data.code ? data.code.substring(0, 50) + '...' : 'empty';
    console.log(`üìã Student code preview: ${preview}`);
  });

  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö code-change
  socket.on('code-change', async (data) => {
    const normalizedSessionId = normalizeSessionId(data.sessionId);
    console.log(`üìù Code change in ${data.sessionId} -> normalized: ${normalizedSessionId} by ${socket.id}`);
    console.log(`üìÑ Code length: ${data.code?.length} chars, Language: ${sessions[normalizedSessionId]?.language}`);
    
    // üî• –û–ë–ù–û–í–ò–¢–¨ –ö–û–î –í –°–ï–°–°–ò–ò
    if (sessions[normalizedSessionId]) {
      sessions[normalizedSessionId].code = data.code;
      sessions[normalizedSessionId].lastActivity = Date.now();
    }
    
    // üî• –ü–ï–†–ï–°–õ–ê–¢–¨ –í–°–ï–ú, –ö–†–û–ú–ï –û–¢–ü–†–ê–í–ò–¢–ï–õ–Ø
    socket.to(normalizedSessionId).emit('code-update', data.code);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤)
    const preview = data.code ? data.code.substring(0, 100) + '...' : 'empty';
    console.log(`üìã Code preview: ${preview}`);
  });

  // üî• –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–ú–ï–ù–´ –Ø–ó–´–ö–ê –ü–†–û–ì–†–ê–ú–ú–ò–†–û–í–ê–ù–ò–Ø
  socket.on('change-language', (data) => {
    const normalizedSessionId = normalizeSessionId(data.sessionId);
    
    if (!SUPPORTED_LANGUAGES[data.language]) {
      socket.emit('error', { message: 'Unsupported language' });
      return;
    }
    
    if (sessions[normalizedSessionId]) {
      const previousLanguage = sessions[normalizedSessionId].language;
      sessions[normalizedSessionId].language = data.language;
      
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –Ω–æ–≤—ã–π –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–æ–¥ —è–∑—ã–∫–∞
      if (data.code) {
        sessions[normalizedSessionId].code = data.code;
      } else {
        sessions[normalizedSessionId].code = SUPPORTED_LANGUAGES[data.language].starterCode;
      }
      
      sessions[normalizedSessionId].lastActivity = Date.now();
      
      console.log(`üåç Language changed from ${previousLanguage} to ${data.language} in session ${data.sessionId} -> normalized: ${normalizedSessionId}`);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Å—Å–∏–∏ –æ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
      io.to(normalizedSessionId).emit('language-changed', {
        language: data.language,
        code: sessions[normalizedSessionId].code,
        languageInfo: SUPPORTED_LANGUAGES[data.language]
      });
    }
  });

  // üî• –î–û–ë–ê–í–ò–¢–¨ –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò
  socket.on('request-sync', (data) => {
    const normalizedSessionId = normalizeSessionId(data.sessionId);
    console.log(`üîÑ Sync requested for session: ${data.sessionId} -> normalized: ${normalizedSessionId}`);
    
    if (sessions[normalizedSessionId]) {
      // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∏–≤—à–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      socket.emit('code-update', sessions[normalizedSessionId].code);
      socket.emit('student-edit-permission', sessions[normalizedSessionId].studentCanEdit);
      socket.emit('language-changed', { 
        language: sessions[normalizedSessionId].language,
        languageInfo: SUPPORTED_LANGUAGES[sessions[normalizedSessionId].language]
      });
      console.log(`‚úÖ Sync completed for ${socket.id}`);
    }
  });

  // üî• –î–û–ë–ê–í–ò–¢–¨ –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–†–û–í–ï–†–ö–ò –°–û–°–¢–û–Ø–ù–ò–Ø –°–ï–°–°–ò–ò
  socket.on('get-session-state', (data) => {
    const normalizedSessionId = normalizeSessionId(data.sessionId);
    console.log(`üìä Session state requested for: ${data.sessionId} -> normalized: ${normalizedSessionId}`);
    
    const sessionState = sessions[normalizedSessionId] ? {
      code: sessions[normalizedSessionId].code,
      studentCanEdit: sessions[normalizedSessionId].studentCanEdit,
      language: sessions[normalizedSessionId].language,
      userCount: sessions[normalizedSessionId].users.length,
      languageInfo: SUPPORTED_LANGUAGES[sessions[normalizedSessionId].language]
    } : null;
    
    socket.emit('session-state', sessionState);
  });

  // üî• –î–û–ë–ê–í–ò–¢–¨ –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø AI-–ü–û–î–°–ö–ê–ó–û–ö
  socket.on('ai-hint-generated', async (data) => {
    const normalizedSessionId = normalizeSessionId(data.sessionId);
    console.log(`üß† AI hint in ${data.sessionId} -> normalized: ${normalizedSessionId} for ${data.language || 'javascript'}`);
    console.log(`üí° Hint: ${data.hint}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º AI-–ø–æ–¥—Å–∫–∞–∑–∫—É –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–µ—Å—Å–∏–∏
    if (sessions[normalizedSessionId]) {
      io.to(normalizedSessionId).emit('ai-hint', {
        hint: data.hint,
        confidence: data.confidence || 0.5,
        language: data.language || 'javascript',
        timestamp: new Date().toISOString()
      });
    }
  });

  // üî• –î–û–ë–ê–í–ò–¢–¨ –û–ë–†–ê–ë–û–¢–ß–ò–ö –ó–ê–í–ï–†–®–ï–ù–ò–Ø –°–ï–°–°–ò–ò
  socket.on('end-session', async (data) => {
    const normalizedSessionId = normalizeSessionId(data.sessionId);
    console.log(`üîö Ending session: ${data.sessionId} -> normalized: ${normalizedSessionId}`);
    
    if (sessions[normalizedSessionId]) {
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
      io.to(normalizedSessionId).emit('session-ended', {
        reason: data.reason,
        endedBy: socket.id,
        duration: Date.now() - sessions[normalizedSessionId].createdAt
      });
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
      delete sessions[normalizedSessionId];
      console.log(`‚úÖ Session ${normalizedSessionId} ended by ${socket.id}`);
    }
  });

  // üî• –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –°–ù–ò–ü–ü–ï–¢–û–í –ö–û–î–ê
  socket.on('request-snippets', (data) => {
    const normalizedSessionId = normalizeSessionId(data.sessionId);
    const snippets = LANGUAGE_SNIPPETS[data.language] || {};
    
    console.log(`üìã Snippets requested for ${data.language} in session ${data.sessionId} -> normalized: ${normalizedSessionId}`);
    socket.emit('snippets-data', {
      language: data.language,
      snippets: snippets
    });
  });

  socket.on('signal', (data) => {
    const normalizedSessionId = normalizeSessionId(data.sessionId);
    console.log(`üì° Signal from ${socket.id} in ${data.sessionId} -> normalized: ${normalizedSessionId}`);
    socket.to(normalizedSessionId).emit('signal', { 
      signal: data.signal, 
      from: socket.id 
    });
  });

  socket.on('user-audio-status', (data) => {
    const normalizedSessionId = normalizeSessionId(data.sessionId);
    console.log(`üé§ Audio status: ${data.userId} -> ${data.active} in ${data.sessionId} -> normalized: ${normalizedSessionId}`);
    socket.to(normalizedSessionId).emit('user-audio-status', { 
      userId: data.userId, 
      active: data.active 
    });
  });

  socket.on('cursor-move', (data) => {
    const normalizedSessionId = normalizeSessionId(data.sessionId);
    // –î–µ–±–∞—É–Ω—Å–∏–º —Å–æ–±—ã—Ç–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if (sessions[normalizedSessionId]) {
      socket.to(normalizedSessionId).emit('cursor-update', { 
        position: data.position, 
        userId: data.userId 
      });
    }
  });

  // üî• –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ò –ê–ù–ê–õ–ò–¢–ò–ö–ò
  socket.on('get-session-stats', (data) => {
    const normalizedSessionId = normalizeSessionId(data.sessionId);
    const session = sessions[normalizedSessionId];
    if (session) {
      const stats = {
        sessionId: normalizedSessionId,
        userCount: session.users.length,
        language: session.language,
        codeLength: session.code?.length,
        studentCanEdit: session.studentCanEdit,
        sessionAge: Date.now() - session.createdAt,
        lastActivity: session.lastActivity
      };
      
      socket.emit('session-stats', stats);
    }
  });

  // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö DISCONNECT
  socket.on('disconnect', async (reason) => {
    console.log('üî¥ –û—Ç–∫–ª—é—á–∏–ª—Å—è:', socket.id, 'Reason:', reason);
    
    if (socket.sessionId && sessions[socket.sessionId]) {
      const session = sessions[socket.sessionId];
      
      // üî• –ü–†–ê–í–ò–õ–¨–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò–ó –°–ï–°–°–ò–ò
      session.users = session.users.filter(userId => userId !== socket.id);
      session.lastActivity = Date.now();
      
      // –£–≤–µ–¥–æ–º–∏—Ç—å –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      socket.to(socket.sessionId).emit('user-left', { 
        userId: socket.id,
        userCount: session.users.length
      });
      
      socket.to(socket.sessionId).emit('user-audio-status', { 
        userId: socket.id, 
        active: false 
      });
      
      console.log(`üë• Remaining users in ${socket.sessionId}:`, session.users.length);
      
      // üî• –£–î–ê–õ–Ø–ï–ú –°–ï–°–°–ò–Æ –¢–û–õ–¨–ö–û –ï–°–õ–ò –ù–ï–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
      if (session.users.length === 0) {
        const sessionDuration = Date.now() - session.createdAt;
        console.log(`üóëÔ∏è Session ${socket.sessionId} deleted (no users). Duration: ${Math.floor(sessionDuration / 1000)}s, Language: ${session.language}`);
        delete sessions[socket.sessionId];
      }
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–æ–∫–µ—Ç–∞
  socket.on('error', (error) => {
    console.error('‚ùå Socket error:', error);
  });
});

// üî• –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ï–°–°–ò–ô (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)
setInterval(() => {
  const now = Date.now();
  const inactiveSessions = [];
  
  Object.entries(sessions).forEach(([sessionId, sessionData]) => {
    // –ü–æ–º–µ—á–∞–µ–º —Å–µ—Å—Å–∏–∏ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ
    if (now - sessionData.lastActivity > 30 * 60 * 1000) {
      inactiveSessions.push(sessionId);
    }
  });
  
  // –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
  inactiveSessions.forEach(sessionId => {
    console.log(`üßπ Removing inactive session: ${sessionId}`);
    delete sessions[sessionId];
  });
  
  if (inactiveSessions.length > 0) {
    console.log(`üßπ Cleaned up ${inactiveSessions.length} inactive sessions`);
  }
  
  // –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
  console.log('üîÑ Active sessions:', Object.keys(sessions).length);
  Object.entries(sessions).forEach(([sessionId, sessionData]) => {
    console.log(`   üìç ${sessionId}: ${sessionData.users.length} users, ${sessionData.language}, code: ${sessionData.code?.length} chars, edit: ${sessionData.studentCanEdit}`);
  });
}, 30000);

// üî• –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
setInterval(() => {
  const stats = {
    totalSessions: Object.keys(sessions).length,
    totalUsers: Object.values(sessions).reduce((acc, session) => acc + session.users.length, 0),
    languagesInUse: [...new Set(Object.values(sessions).map(s => s.language))],
    sessionsByLanguage: {}
  };

  Object.values(sessions).forEach(session => {
    stats.sessionsByLanguage[session.language] = (stats.sessionsByLanguage[session.language] || 0) + 1;
  });

  console.log('üìä Server Statistics:', stats);
}, 300000);

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
  console.error('‚ùå Uncaught Exception:', error);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
const PORT = process.env.PORT || 8080;

console.log('üîß Server configuration:');
console.log('PORT:', PORT);
console.log('NODE_ENV:', process.env.NODE_ENV);
console.log('CORS: enabled for all origins');
console.log('üåç Supported languages:', Object.keys(SUPPORTED_LANGUAGES).join(', '));
console.log('üìÅ Language categories:', Object.keys(LANGUAGE_CATEGORIES).join(', '));
console.log('üìã Languages with snippets:', Object.keys(LANGUAGE_SNIPPETS).join(', '));
console.log('üìö Import analysis: ENABLED for all languages');

server.listen(PORT, '0.0.0.0', () => {
  console.log(`‚úÖ SERVER STARTED on port ${PORT}`);
  console.log(`‚úÖ Health check: http://0.0.0.0:${PORT}/`);
  console.log(`‚úÖ WebSocket: ws://0.0.0.0:${PORT}`);
  console.log(`‚úÖ Environment: ${process.env.NODE_ENV || 'development'}`);
  console.log(`‚úÖ Debug endpoints available:`);
  console.log(`   üìä Sessions: http://0.0.0.0:${PORT}/api/debug/sessions`);
  console.log(`   üåç Languages: http://0.0.0.0:${PORT}/api/languages`);
  console.log(`   üìà Stats: http://0.0.0.0:${PORT}/api/stats`);
}).on('error', (error) => {
  console.error('‚ùå FAILED to start server:', error);
  process.exit(1);
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export { app, io, sessions, SUPPORTED_LANGUAGES, LANGUAGE_CATEGORIES, LANGUAGE_SNIPPETS };