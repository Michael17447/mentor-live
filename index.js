import express from 'express';
import http from 'http';
import cors from 'cors';
import { Server } from 'socket.io';
import { v4 as uuidv4 } from 'uuid';

// üî• –î–û–ë–ê–í–ò–¢–¨ –≠–¢–ò –ò–ú–ü–û–†–¢–´ –î–õ–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–•
import { sequelize, Session, SessionEvent, AIHint } from './models/index.js';

console.log('üöÄ Starting CodeMentor server...');
console.log('Node version:', process.version);

const app = express();

// ‚ö†Ô∏è –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
const corsOptions = {
  origin: function (origin, callback) {
    // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ origins –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('üìç CORS request from origin:', origin);
    callback(null, true);
  },
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
};

app.use(cors(corsOptions));
app.use(express.json());

const server = http.createServer(app);
const io = new Server(server, { 
  cors: {
    origin: "*",
    methods: ["GET", "POST"],
    credentials: true
  },
  transports: ['websocket', 'polling']
});

const sessions = {};

// üî• –î–û–ë–ê–í–ò–¢–¨ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Æ –ë–ê–ó–´ –î–ê–ù–ù–´–•
const initializeDatabase = async () => {
  try {
    await sequelize.authenticate();
    console.log('‚úÖ Database connection established');
    
    await sequelize.sync({ alter: true });
    console.log('‚úÖ Database synchronized');
  } catch (error) {
    console.error('‚ùå Database connection failed:', error);
  }
};

initializeDatabase();

// === API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏ ===
app.post('/api/sessions', (req, res) => {
  console.log('üìù Creating new session:', req.body);
  const { course_id, lesson_id, user_id, role = 'student' } = req.body;
  const sessionId = uuidv4().substring(0, 8).toUpperCase();
  
  res.json({
    session_id: sessionId,
    join_url: `https://codemirror-client.vercel.app/embed/${sessionId}?role=${role}`,
    embed_iframe: `<iframe src="https://codemirror-client.vercel.app/embed/${sessionId}?role=${role}" width="100%" height="600" allow="microphone"></iframe>`
  });
});

// Health check endpoints
app.get('/', (req, res) => {
  console.log('üè† GET / request received');
  res.json({ 
    status: 'OK', 
    message: 'CodeMentor Server is running',
    timestamp: new Date().toISOString(),
    socketConnections: Object.keys(sessions).length
  });
});

app.get('/api/health', (req, res) => {
  console.log('‚ù§Ô∏è GET /api/health request received');
  res.json({ 
    status: 'healthy',
    timestamp: new Date().toISOString(),
    sessions: Object.keys(sessions).length
  });
});

// üî• –î–û–ë–ê–í–ò–¢–¨ –ù–û–í–´–ï API –î–õ–Ø –ò–°–¢–û–†–ò–ò
app.get('/api/sessions/:sessionId/history', async (req, res) => {
  try {
    const session = await Session.findOne({
      where: { sessionId: req.params.sessionId },
      include: [SessionEvent, AIHint],
      order: [[SessionEvent, 'timestamp', 'ASC']]
    });
    
    if (!session) {
      return res.status(404).json({ error: 'Session not found' });
    }
    
    res.json(session);
  } catch (error) {
    console.error('‚ùå Failed to get session history:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

app.get('/api/mentor/:mentorId/sessions', async (req, res) => {
  try {
    const mentorSessions = await Session.findAll({
      where: { mentorId: req.params.mentorId },
      order: [['createdAt', 'DESC']]
    });
    
    res.json(mentorSessions);
  } catch (error) {
    console.error('‚ùå Failed to get mentor sessions:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// === WebSocket –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ ===
io.on('connection', (socket) => {
  console.log('üîå –ü–æ–¥–∫–ª—é—á–∏–ª—Å—è:', socket.id);
  console.log('üìç Headers origin:', socket.handshake.headers.origin);
  console.log('üìç User agent:', socket.handshake.headers['user-agent']);

  // üî• –ò–ó–ú–ï–ù–ò–¢–¨ –≠–¢–û–¢ –û–ë–†–ê–ë–û–¢–ß–ò–ö - –î–û–ë–ê–í–ò–¢–¨ –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ë–î
  socket.on('join-session', async (sessionId) => {
    console.log(`üì• ${socket.id} joined session: ${sessionId}`);
    socket.sessionId = sessionId;
    
    if (!sessions[sessionId]) {
      sessions[sessionId] = [];
      
      // üî• –°–û–•–†–ê–ù–ï–ù–ò–ï –°–ï–°–°–ò–ò –í –ë–ê–ó–£ –î–ê–ù–ù–´–•
      try {
        const session = await Session.create({
          sessionId,
          mentorId: socket.id,
          status: 'active'
        });
        
        await SessionEvent.create({
          type: 'session_start',
          userId: socket.id,
          data: { sessionId },
          SessionId: session.id
        });
        
        console.log(`üÜï Created session in database: ${sessionId}`);
      } catch (error) {
        console.error('‚ùå Failed to create session:', error);
      }
    }
    
    sessions[sessionId].push(socket);
    socket.join(sessionId);
    
    socket.to(sessionId).emit('user-joined', { userId: socket.id });
    console.log(`üë• Users in session ${sessionId}:`, sessions[sessionId].length);
  });

  // üî• –ò–ó–ú–ï–ù–ò–¢–¨ –≠–¢–û–¢ –û–ë–†–ê–ë–û–¢–ß–ò–ö - –î–û–ë–ê–í–ò–¢–¨ –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ë–î
  socket.on('code-change', async (data) => {
    console.log(`üìù Code change in ${data.sessionId} by ${socket.id}`);
    console.log(`üìÑ Code length: ${data.code?.length} chars`);
    
    socket.to(data.sessionId).emit('code-update', data.code);
    
    // üî• –°–û–•–†–ê–ù–ï–ù–ò–ï –ò–ó–ú–ï–ù–ï–ù–ò–ô –ö–û–î–ê –í –ë–ê–ó–£ –î–ê–ù–ù–´–•
    try {
      const session = await Session.findOne({ where: { sessionId: data.sessionId } });
      if (session) {
        await SessionEvent.create({
          type: 'code_change',
          userId: socket.id,
          data: { 
            codeLength: data.code?.length,
            lines: data.code?.split('\n').length
          },
          SessionId: session.id
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –≤ —Å–µ—Å—Å–∏–∏
        await session.update({ finalCode: data.code });
        
        // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤)
        const preview = data.code ? data.code.substring(0, 100) + '...' : 'empty';
        console.log(`üìã Code preview: ${preview}`);
      }
    } catch (error) {
      console.error('‚ùå Failed to save code change:', error);
    }
  });

  // üî• –î–û–ë–ê–í–ò–¢–¨ –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø AI-–ü–û–î–°–ö–ê–ó–û–ö
  socket.on('ai-hint-generated', async (data) => {
    console.log(`üß† AI hint in ${data.sessionId}`);
    
    try {
      const session = await Session.findOne({ where: { sessionId: data.sessionId } });
      if (session) {
        await AIHint.create({
          hintText: data.hint,
          confidence: data.confidence || 0.5,
          SessionId: session.id
        });
        
        await SessionEvent.create({
          type: 'ai_hint',
          userId: 'ai_system',
          data: { hint: data.hint },
          SessionId: session.id
        });
      }
    } catch (error) {
      console.error('‚ùå Failed to save AI hint:', error);
    }
  });

  // üî• –î–û–ë–ê–í–ò–¢–¨ –û–ë–†–ê–ë–û–¢–ß–ò–ö –ó–ê–í–ï–†–®–ï–ù–ò–Ø –°–ï–°–°–ò–ò
  socket.on('end-session', async (data) => {
    console.log(`üîö Ending session: ${data.sessionId}`);
    
    try {
      const session = await Session.findOne({ where: { sessionId: data.sessionId } });
      if (session) {
        const duration = Math.floor((new Date() - session.createdAt) / 1000);
        await session.update({ 
          status: 'completed',
          duration: duration
        });
        
        await SessionEvent.create({
          type: 'session_end',
          userId: socket.id,
          data: { reason: data.reason, duration },
          SessionId: session.id
        });
        
        console.log(`‚úÖ Session ${data.sessionId} completed, duration: ${duration}s`);
      }
    } catch (error) {
      console.error('‚ùå Failed to end session:', error);
    }
  });

  socket.on('signal', (data) => {
    console.log(`üì° Signal from ${socket.id} in ${data.sessionId}`);
    socket.to(data.sessionId).emit('signal', { 
      signal: data.signal, 
      from: socket.id 
    });
  });

  socket.on('user-audio-status', (data) => {
    console.log(`üé§ Audio status: ${data.userId} -> ${data.active} in ${data.sessionId}`);
    socket.to(data.sessionId).emit('user-audio-status', { 
      userId: data.userId, 
      active: data.active 
    });
  });

  socket.on('cursor-move', (data) => {
    console.log(`üñ±Ô∏è Cursor move by ${data.userId} in ${data.sessionId}`);
    console.log(`üìç Position: line ${data.position?.lineNumber}, column ${data.position?.column}`);
    
    socket.to(data.sessionId).emit('cursor-update', { 
      position: data.position, 
      userId: data.userId 
    });
  });

  socket.on('disconnect', (reason) => {
    console.log('üî¥ –û—Ç–∫–ª—é—á–∏–ª—Å—è:', socket.id, 'Reason:', reason);
    
    if (socket.sessionId) {
      sessions[socket.sessionId] = sessions[socket.sessionId].filter(s => s.id !== socket.id);
      
      // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å–µ—Å—Å–∏–∏
      if (sessions[socket.sessionId].length === 0) {
        delete sessions[socket.sessionId];
        console.log(`üóëÔ∏è Session ${socket.sessionId} deleted (no users)`);
      }
      
      socket.to(socket.sessionId).emit('user-left', { userId: socket.id });
      socket.to(socket.sessionId).emit('user-audio-status', { 
        userId: socket.id, 
        active: false 
      });
      
      console.log(`üë• Remaining users in ${socket.sessionId}:`, sessions[socket.sessionId]?.length || 0);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–æ–∫–µ—Ç–∞
  socket.on('error', (error) => {
    console.error('‚ùå Socket error:', error);
  });
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
  console.error('‚ùå Uncaught Exception:', error);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
const PORT = process.env.PORT || 8080;

console.log('üîß Server configuration:');
console.log('PORT:', PORT);
console.log('NODE_ENV:', process.env.NODE_ENV);
console.log('CORS: enabled for all origins');

server.listen(PORT, '0.0.0.0', () => {
  console.log(`‚úÖ SERVER STARTED on port ${PORT}`);
  console.log(`‚úÖ Health check: http://0.0.0.0:${PORT}/`);
  console.log(`‚úÖ WebSocket: ws://0.0.0.0:${PORT}`);
  console.log(`‚úÖ Environment: ${process.env.NODE_ENV || 'development'}`);
}).on('error', (error) => {
  console.error('‚ùå FAILED to start server:', error);
  process.exit(1);
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export { app, io, sessions };